["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TintColor;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0 * _TintColor;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TintColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat0 = u_xlat0 * _TintColor;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _TintColor;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0 * _TintColor;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat10_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _TintColor;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0 * _TintColor;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat0 = vs_COLOR0 + vs_COLOR0;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * u_xlat16_1;\n    SV_Target0.w = u_xlat0.w;\n    SV_Target0.w = clamp(SV_Target0.w, 0.0, 1.0);\n    SV_Target0.xyz = u_xlat0.xyz;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24 * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x = u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nvarying mediump float vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump float vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nvec3 u_xlat13;\nfloat u_xlat16;\nfloat u_xlat21;\nfloat u_xlat24;\nfloat u_xlat25;\nfloat u_xlat26;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat24 + u_xlat0.x;\n        u_xlat8 = (-u_xlat0.y) * u_xlat24 + 1.0;\n        u_xlat16 = u_xlat8 * 5.25 + -6.80000019;\n        u_xlat16 = u_xlat8 * u_xlat16 + 3.82999992;\n        u_xlat16 = u_xlat8 * u_xlat16 + 0.458999991;\n        u_xlat8 = u_xlat8 * u_xlat16 + -0.00286999997;\n        u_xlat8 = u_xlat8 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat8);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat24 = sqrt(u_xlat24);\n        u_xlat25 = (-u_xlat24) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat24;\n        u_xlat28 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat24 = u_xlat28 / u_xlat24;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat28 = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat26 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat26 * u_xlat28 + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat28 + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat24 = (-u_xlat24) + 1.0;\n        u_xlat28 = u_xlat24 * 5.25 + -6.80000019;\n        u_xlat28 = u_xlat24 * u_xlat28 + 3.82999992;\n        u_xlat28 = u_xlat24 * u_xlat28 + 0.458999991;\n        u_xlat24 = u_xlat24 * u_xlat28 + -0.00286999997;\n        u_xlat24 = u_xlat24 * 1.44269502;\n        u_xlat24 = exp2(u_xlat24);\n        u_xlat24 = u_xlat24 * 0.25;\n        u_xlat24 = u_xlat26 * 0.25 + (-u_xlat24);\n        u_xlat24 = u_xlat25 * u_xlat24 + u_xlat0.y;\n        u_xlat24 = max(u_xlat24, 0.0);\n        u_xlat24 = min(u_xlat24, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat24)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat24 = u_xlat0.z * u_xlat25;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat25 = (-u_xlat0.x) + 1.0;\n        u_xlat25 = u_xlat25 * 230.831207;\n        u_xlat25 = exp2(u_xlat25);\n        u_xlat26 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat26 = u_xlat26 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat4.x = u_xlat26 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat26 * u_xlat4.x + 0.458999991;\n        u_xlat26 = u_xlat26 * u_xlat4.x + -0.00286999997;\n        u_xlat26 = u_xlat26 * 1.44269502;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat26 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat25 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat25;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat24) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat26 = min(u_xlat2.y, -0.00100000005);\n        u_xlat26 = -9.99999975e-05 / u_xlat26;\n        u_xlat5.xyz = vec3(u_xlat26) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat21 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.y * u_xlat21 + 0.458999991;\n        u_xlat13.x = u_xlat5.y * u_xlat21 + -0.00286999997;\n        u_xlat13.x = u_xlat13.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat13.x);\n        u_xlat21 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 3.82999992;\n        u_xlat21 = u_xlat5.x * u_xlat21 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat21 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat13.xz = vec2(u_xlat26) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat13.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat26 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat26 = sqrt(u_xlat26);\n        u_xlat26 = (-u_xlat26) + 1.0;\n        u_xlat26 = u_xlat26 * 230.831207;\n        u_xlat26 = exp2(u_xlat26);\n        u_xlat5.x = u_xlat26 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat26 = u_xlat13.z * u_xlat26;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat26);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat26 = u_xlat2.y * -50.0;\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_27 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = u_xlat16_27 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_27) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD0 = u_xlat26;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nin mediump float vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = vs_TEXCOORD0;\n    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    SV_Target0.xyz = vec3(u_xlat16_0) * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nvarying mediump vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout mediump vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * vec3(8000.0, 8000.0, 8000.0);\n    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(27.0, 27.0, 27.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nin mediump vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nvoid main()\n{\n    u_xlat16_0.xyz = vs_TEXCOORD0.xyz + _WorldSpaceLightPos0.xyz;\n    u_xlat16_0.x = dot(u_xlat16_0.xyz, u_xlat16_0.xyz);\n    u_xlat16_0.x = sqrt(u_xlat16_0.x);\n    u_xlat16_3.x = float(1.0) / _SunSize;\n    u_xlat16_0.x = u_xlat16_3.x * u_xlat16_0.x;\n    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_0.x * -2.0 + 3.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_0.x = (-u_xlat16_3.x) * u_xlat16_0.x + 1.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_3.x = vs_TEXCOORD0.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_1.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_1.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    u_xlatb2 = vs_TEXCOORD0.y<0.0;\n    SV_Target0.xyz = (bool(u_xlatb2)) ? u_xlat16_1.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nattribute highp vec4 in_POSITION0;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nvarying highp vec3 vs_TEXCOORD0;\nvarying mediump vec3 vs_TEXCOORD1;\nvarying mediump vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD3;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump float _Exposure;\nuniform \tmediump vec3 _GroundColor;\nuniform \tmediump vec3 _SkyTint;\nuniform \tmediump float _AtmosphereThickness;\nin highp vec4 in_POSITION0;\nout highp vec3 vs_TEXCOORD0;\nout mediump vec3 vs_TEXCOORD1;\nout mediump vec3 vs_TEXCOORD2;\nout mediump vec3 vs_TEXCOORD3;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_4;\nvec4 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nvec3 u_xlat14;\nfloat u_xlat18;\nfloat u_xlat23;\nfloat u_xlat27;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nfloat u_xlat31;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlat1.xyz = (-_SkyTint.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat1.xyz = u_xlat1.xyz * vec3(0.300000012, 0.300000042, 0.300000012) + vec3(0.5, 0.419999987, 0.324999988);\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * u_xlat1.xyz;\n    u_xlat1.xyz = vec3(1.0, 1.0, 1.0) / u_xlat1.xyz;\n    u_xlat16_3.x = log2(_AtmosphereThickness);\n    u_xlat16_3.x = u_xlat16_3.x * 2.5;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.xy = u_xlat16_3.xx * vec2(0.049999997, 0.0314159282);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb0 = u_xlat2.y>=0.0;\n    if(u_xlatb0){\n        u_xlat0.x = u_xlat2.y * u_xlat2.y + 0.0506249666;\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat0.x = (-u_xlat0.y) * u_xlat27 + u_xlat0.x;\n        u_xlat9 = (-u_xlat0.y) * u_xlat27 + 1.0;\n        u_xlat18 = u_xlat9 * 5.25 + -6.80000019;\n        u_xlat18 = u_xlat9 * u_xlat18 + 3.82999992;\n        u_xlat18 = u_xlat9 * u_xlat18 + 0.458999991;\n        u_xlat9 = u_xlat9 * u_xlat18 + -0.00286999997;\n        u_xlat9 = u_xlat9 * 1.44269502;\n        u_xlat0.y = exp2(u_xlat9);\n        u_xlat0.xyz = u_xlat0.xyx * vec3(0.5, 0.246031836, 20.0);\n        u_xlat4.xyz = u_xlat0.xxx * u_xlat2.xyz;\n        u_xlat4.xyz = u_xlat4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat27 = sqrt(u_xlat27);\n        u_xlat28 = (-u_xlat27) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat27;\n        u_xlat31 = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat27 = u_xlat31 / u_xlat27;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat31 = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat29 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat29 * u_xlat31 + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat31 + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat27 = (-u_xlat27) + 1.0;\n        u_xlat31 = u_xlat27 * 5.25 + -6.80000019;\n        u_xlat31 = u_xlat27 * u_xlat31 + 3.82999992;\n        u_xlat31 = u_xlat27 * u_xlat31 + 0.458999991;\n        u_xlat27 = u_xlat27 * u_xlat31 + -0.00286999997;\n        u_xlat27 = u_xlat27 * 1.44269502;\n        u_xlat27 = exp2(u_xlat27);\n        u_xlat27 = u_xlat27 * 0.25;\n        u_xlat27 = u_xlat29 * 0.25 + (-u_xlat27);\n        u_xlat27 = u_xlat28 * u_xlat27 + u_xlat0.y;\n        u_xlat27 = max(u_xlat27, 0.0);\n        u_xlat27 = min(u_xlat27, 50.0);\n        u_xlat5.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat6.xyz = (-vec3(u_xlat27)) * u_xlat5.xyz;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat6.xyz = exp2(u_xlat6.xyz);\n        u_xlat27 = u_xlat0.z * u_xlat28;\n        u_xlat4.xyz = u_xlat2.xyz * u_xlat0.xxx + u_xlat4.xyz;\n        u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat0.x = sqrt(u_xlat0.x);\n        u_xlat28 = (-u_xlat0.x) + 1.0;\n        u_xlat28 = u_xlat28 * 230.831207;\n        u_xlat28 = exp2(u_xlat28);\n        u_xlat29 = dot(_WorldSpaceLightPos0.xyz, u_xlat4.xyz);\n        u_xlat29 = u_xlat29 / u_xlat0.x;\n        u_xlat4.x = dot(u_xlat2.xyz, u_xlat4.xyz);\n        u_xlat0.x = u_xlat4.x / u_xlat0.x;\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat4.x = u_xlat29 * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat29 * u_xlat4.x + 0.458999991;\n        u_xlat29 = u_xlat29 * u_xlat4.x + -0.00286999997;\n        u_xlat29 = u_xlat29 * 1.44269502;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat0.x = (-u_xlat0.x) + 1.0;\n        u_xlat4.x = u_xlat0.x * 5.25 + -6.80000019;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 3.82999992;\n        u_xlat4.x = u_xlat0.x * u_xlat4.x + 0.458999991;\n        u_xlat0.x = u_xlat0.x * u_xlat4.x + -0.00286999997;\n        u_xlat0.x = u_xlat0.x * 1.44269502;\n        u_xlat0.x = exp2(u_xlat0.x);\n        u_xlat0.x = u_xlat0.x * 0.25;\n        u_xlat0.x = u_xlat29 * 0.25 + (-u_xlat0.x);\n        u_xlat0.x = u_xlat28 * u_xlat0.x + u_xlat0.y;\n        u_xlat0.x = max(u_xlat0.x, 0.0);\n        u_xlat0.x = min(u_xlat0.x, 50.0);\n        u_xlat4.xyz = u_xlat5.xyz * (-u_xlat0.xxx);\n        u_xlat4.xyz = u_xlat4.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat4.xyz = exp2(u_xlat4.xyz);\n        u_xlat0.x = u_xlat0.z * u_xlat28;\n        u_xlat0.xyz = u_xlat0.xxx * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat6.xyz * vec3(u_xlat27) + u_xlat0.xyz;\n        u_xlat4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;\n        u_xlat4.xyz = u_xlat0.xyz * u_xlat4.xyz;\n        u_xlat0.xyz = u_xlat0.xyz * vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    } else {\n        u_xlat29 = min(u_xlat2.y, -0.00100000005);\n        u_xlat29 = -9.99999975e-05 / u_xlat29;\n        u_xlat5.xyz = vec3(u_xlat29) * u_xlat2.xyz + vec3(0.0, 1.00010002, 0.0);\n        u_xlat5.w = dot((-u_xlat2.xyz), u_xlat5.xyz);\n        u_xlat5.x = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n        u_xlat5.xy = (-u_xlat5.xw) + vec2(1.0, 1.0);\n        u_xlat23 = u_xlat5.y * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.y * u_xlat23 + 0.458999991;\n        u_xlat14.x = u_xlat5.y * u_xlat23 + -0.00286999997;\n        u_xlat14.x = u_xlat14.x * 1.44269502;\n        u_xlat5.y = exp2(u_xlat14.x);\n        u_xlat23 = u_xlat5.x * 5.25 + -6.80000019;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 3.82999992;\n        u_xlat23 = u_xlat5.x * u_xlat23 + 0.458999991;\n        u_xlat5.x = u_xlat5.x * u_xlat23 + -0.00286999997;\n        u_xlat5.xyz = u_xlat5.xyy * vec3(1.44269502, 0.25, 0.249900013);\n        u_xlat5.x = exp2(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * 0.25 + u_xlat5.y;\n        u_xlat14.xz = vec2(u_xlat29) * vec2(0.5, 20.0);\n        u_xlat6.xyz = u_xlat2.xyz * u_xlat14.xxx;\n        u_xlat6.xyz = u_xlat6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.0, 1.00010002, 0.0);\n        u_xlat29 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat29 = sqrt(u_xlat29);\n        u_xlat29 = (-u_xlat29) + 1.0;\n        u_xlat29 = u_xlat29 * 230.831207;\n        u_xlat29 = exp2(u_xlat29);\n        u_xlat5.x = u_xlat29 * u_xlat5.x + (-u_xlat5.z);\n        u_xlat5.x = max(u_xlat5.x, 0.0);\n        u_xlat5.x = min(u_xlat5.x, 50.0);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.yyy + vec3(0.0125663709, 0.0125663709, 0.0125663709);\n        u_xlat5.xyz = (-u_xlat5.xxx) * u_xlat6.xyz;\n        u_xlat5.xyz = u_xlat5.xyz * vec3(1.44269502, 1.44269502, 1.44269502);\n        u_xlat0.xyz = exp2(u_xlat5.xyz);\n        u_xlat29 = u_xlat14.z * u_xlat29;\n        u_xlat5.xyz = u_xlat0.xyz * vec3(u_xlat29);\n        u_xlat6.xyz = u_xlat1.xyz * u_xlat16_3.xxx + vec3(0.0199999996, 0.0199999996, 0.0199999996);\n        u_xlat4.xyz = u_xlat5.xyz * u_xlat6.xyz;\n        u_xlat16_4.xyz = u_xlat4.xyz;\n        u_xlat16_0.xyz = u_xlat0.xyz;\n    }\n    u_xlat16_3.xyz = vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z) * vec3(_GroundColor.x, _GroundColor.y, _GroundColor.z);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_0.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_WorldSpaceLightPos0.xyz, (-u_xlat2.xyz));\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * 0.75 + 0.75;\n    u_xlat16_7.xyz = vec3(u_xlat16_30) * u_xlat16_4.xyz;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(_Exposure);\n    u_xlat16_30 = dot(_LightColor0.xyz, _LightColor0.xyz);\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_30 = max(u_xlat16_30, 0.25);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_0.xyz = u_xlat16_0.xyz;\n    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _LightColor0.xyz;\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(15.0, 15.0, 15.0);\n    u_xlat16_8.xyz = u_xlat16_8.xyz / vec3(u_xlat16_30);\n    vs_TEXCOORD1.xyz = sqrt(u_xlat16_3.xyz);\n    vs_TEXCOORD2.xyz = sqrt(u_xlat16_7.xyz);\n    vs_TEXCOORD3.xyz = sqrt(u_xlat16_8.xyz);\n    vs_TEXCOORD0.xyz = (-u_xlat2.xyz);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tmediump float _SunSize;\nuniform \tmediump float _SunSizeConvergence;\nin highp vec3 vs_TEXCOORD0;\nin mediump vec3 vs_TEXCOORD1;\nin mediump vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD3;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_6;\nvoid main()\n{\n    u_xlat16_0.x = log2(_SunSize);\n    u_xlat16_0.x = u_xlat16_0.x * 0.649999976;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat1.x = dot(vs_TEXCOORD0.xyz, vs_TEXCOORD0.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD0.xyz;\n    u_xlat16_3.x = dot(_WorldSpaceLightPos0.xyz, (-u_xlat1.xyz));\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * _SunSizeConvergence;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_6 = (-u_xlat16_3.x) * 1.98000002 + 1.98010004;\n    u_xlat16_0.y = u_xlat16_3.x * u_xlat16_3.x + 1.0;\n    u_xlat16_0.xy = u_xlat16_0.xy * vec2(10.0, 0.0100164423);\n    u_xlat16_6 = log2(u_xlat16_6);\n    u_xlat16_0.x = u_xlat16_6 * u_xlat16_0.x;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_0.x = max(u_xlat16_0.x, 9.99999975e-05);\n    u_xlat16_0.x = u_xlat16_0.y / u_xlat16_0.x;\n    u_xlat16_0.x = log2(u_xlat16_0.x);\n    u_xlat16_0.x = u_xlat16_0.x * 0.454544991;\n    u_xlat16_0.x = exp2(u_xlat16_0.x);\n    u_xlat16_3.x = u_xlat1.y * 50.0;\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlatb1 = u_xlat1.y<0.0;\n    u_xlat16_2.xyz = vs_TEXCOORD1.xyz + (-vs_TEXCOORD2.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_2.xyz + vs_TEXCOORD2.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD3.xyz * u_xlat16_0.xxx + u_xlat16_3.xyz;\n    SV_Target0.xyz = (bool(u_xlatb1)) ? u_xlat16_2.xyz : u_xlat16_3.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nbool u_xlatb15;\nbool u_xlatb27;\nfloat u_xlat36;\nint u_xlati37;\nfloat u_xlat38;\nbool u_xlatb38;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat2.xyz = (-u_xlat0.xyz) * unity_LightPosition[u_xlati_loop_1].www + unity_LightPosition[u_xlati_loop_1].xyz;\n        u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n        u_xlat3.x = unity_LightAtten[u_xlati_loop_1].z * u_xlat38 + 1.0;\n        u_xlat3.x = float(1.0) / u_xlat3.x;\n        u_xlatb15 = 0.0!=unity_LightPosition[u_xlati_loop_1].w;\n        u_xlatb27 = unity_LightAtten[u_xlati_loop_1].w<u_xlat38;\n        u_xlatb15 = u_xlatb27 && u_xlatb15;\n        u_xlat38 = max(u_xlat38, 9.99999997e-07);\n        u_xlat38 = inversesqrt(u_xlat38);\n        u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n        u_xlat38 = u_xlat3.x * 0.5;\n        u_xlat16_44 = (u_xlatb15) ? 0.0 : u_xlat38;\n        u_xlat16_45 = dot(u_xlat1.xyz, u_xlat2.xyz);\n        u_xlat16_45 = max(u_xlat16_45, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_45) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb38 = 0.0<u_xlat16_45;\n        if(u_xlatb38){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + u_xlat2.xyz;\n            u_xlat16_45 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = inversesqrt(u_xlat16_45);\n            u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_11.xyz;\n            u_xlat16_45 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_45 = max(u_xlat16_45, 0.0);\n            u_xlat16_45 = log2(u_xlat16_45);\n            u_xlat16_45 = u_xlat16_43 * u_xlat16_45;\n            u_xlat16_45 = exp2(u_xlat16_45);\n            u_xlat16_45 = min(u_xlat16_45, 1.0);\n            u_xlat16_45 = u_xlat16_44 * u_xlat16_45;\n            u_xlat16_9.xyz = vec3(u_xlat16_45) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * u_xlat16_10.xyz;\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tmediump vec4 unity_LightAtten[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nbool u_xlatb5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nfloat u_xlat10;\nvec3 u_xlat11;\nvec3 u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nmediump vec3 u_xlat16_14;\nvec3 u_xlat15;\nvec3 u_xlat16;\nbool u_xlatb16;\nfloat u_xlat17;\nmediump vec3 u_xlat16_18;\nvec3 u_xlat19;\nvec3 u_xlat21;\nmediump vec3 u_xlat16_22;\nint u_xlati24;\nbool u_xlatb24;\nmediump vec3 u_xlat16_25;\nmediump vec3 u_xlat16_26;\nvec3 u_xlat28;\nvec3 u_xlat29;\nbool u_xlatb29;\nvec3 u_xlat31;\nvec3 u_xlat32;\nbool u_xlatb32;\nvec3 u_xlat35;\nvec3 u_xlat36;\nbool u_xlatb36;\nmediump float u_xlat16_41;\nbool u_xlatb43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nfloat u_xlat48;\nbool u_xlatb48;\nfloat u_xlat51;\nbool u_xlatb51;\nfloat u_xlat55;\nbool u_xlatb55;\nfloat u_xlat58;\nfloat u_xlat61;\nfloat u_xlat62;\nmediump float u_xlat16_63;\nmediump float u_xlat16_64;\nbool u_xlatb65;\nfloat u_xlat67;\nbool u_xlatb68;\nfloat u_xlat70;\nbool u_xlatb72;\nvoid main()\n{\n    u_xlatb0 = unity_LightPosition[1].w!=0.0;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat19.xyz;\n    u_xlat19.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat19.xyz;\n    u_xlat19.xyz = u_xlat19.xyz * in_POSITION0.yyy;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat19.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;\n    u_xlat19.xyz = u_xlat19.xyz + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat19.xyz) * unity_LightPosition[1].www + unity_LightPosition[1].xyz;\n    u_xlat58 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb2 = unity_LightAtten[1].w<u_xlat58;\n    u_xlatb0 = u_xlatb0 && u_xlatb2;\n    u_xlat2.x = unity_LightAtten[1].z * u_xlat58 + 1.0;\n    u_xlat58 = max(u_xlat58, 9.99999997e-07);\n    u_xlat58 = inversesqrt(u_xlat58);\n    u_xlat2.x = float(1.0) / u_xlat2.x;\n    u_xlat2.x = u_xlat2.x * 0.5;\n    u_xlat16_3.x = (u_xlatb0) ? 0.0 : u_xlat2.x;\n    u_xlat2.xyz = vec3(u_xlat58) * u_xlat1.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat4.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat4.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat5.xyz;\n    u_xlat4.z = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat0.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_6.xyz = u_xlat16_22.xxx * _Color.xyz;\n    u_xlatb0 = 0.0<u_xlat16_22.x;\n    u_xlat16_22.xyz = u_xlat16_6.xyz * unity_LightColor[1].xyz;\n    u_xlat16_22.xyz = u_xlat16_3.xxx * u_xlat16_22.xyz;\n    u_xlat16_22.xyz = min(u_xlat16_22.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlatb2 = unity_LightPosition[0].w!=0.0;\n    u_xlat21.xyz = (-u_xlat19.xyz) * unity_LightPosition[0].www + unity_LightPosition[0].xyz;\n    u_xlat61 = dot(u_xlat21.xyz, u_xlat21.xyz);\n    u_xlatb5 = unity_LightAtten[0].w<u_xlat61;\n    u_xlatb2 = u_xlatb2 && u_xlatb5;\n    u_xlat5.x = unity_LightAtten[0].z * u_xlat61 + 1.0;\n    u_xlat61 = max(u_xlat61, 9.99999997e-07);\n    u_xlat61 = inversesqrt(u_xlat61);\n    u_xlat5.x = float(1.0) / u_xlat5.x;\n    u_xlat5.x = u_xlat5.x * 0.5;\n    u_xlat16_6.x = (u_xlatb2) ? 0.0 : u_xlat5.x;\n    u_xlat5.xyz = u_xlat21.xyz * vec3(u_xlat61);\n    u_xlat16_25.x = dot(u_xlat4.xyz, u_xlat5.xyz);\n    u_xlat16_25.x = max(u_xlat16_25.x, 0.0);\n    u_xlat16_7.xyz = u_xlat16_25.xxx * _Color.xyz;\n    u_xlatb2 = 0.0<u_xlat16_25.x;\n    u_xlat16_25.xyz = u_xlat16_7.xyz * unity_LightColor[0].xyz;\n    u_xlat16_25.xyz = u_xlat16_6.xxx * u_xlat16_25.xyz;\n    u_xlat16_25.xyz = min(u_xlat16_25.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_25.xyz = u_xlat16_25.xyz + u_xlat16_7.xyz;\n    u_xlatb5 = 0<unity_VertexLightParams.x;\n    u_xlat16_25.xyz = (bool(u_xlatb5)) ? u_xlat16_25.xyz : u_xlat16_7.xyz;\n    u_xlat16_22.xyz = u_xlat16_22.xyz + u_xlat16_25.xyz;\n    u_xlati24 = u_xlatb5 ? 1 : int(0);\n    u_xlatb43 = u_xlati24<unity_VertexLightParams.x;\n    u_xlati24 = (u_xlatb43) ? 2 : u_xlati24;\n    u_xlat16_22.xyz = (bool(u_xlatb43)) ? u_xlat16_22.xyz : u_xlat16_25.xyz;\n    u_xlat8.xyz = (-u_xlat19.xyz) * unity_LightPosition[2].www + unity_LightPosition[2].xyz;\n    u_xlat62 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb65 = unity_LightAtten[2].w<u_xlat62;\n    u_xlatb9 = unity_LightPosition[2].w!=0.0;\n    u_xlatb65 = u_xlatb65 && u_xlatb9;\n    u_xlat9.x = unity_LightAtten[2].z * u_xlat62 + 1.0;\n    u_xlat62 = max(u_xlat62, 9.99999997e-07);\n    u_xlat62 = inversesqrt(u_xlat62);\n    u_xlat9.x = float(1.0) / u_xlat9.x;\n    u_xlat9.x = u_xlat9.x * 0.5;\n    u_xlat16_25.x = (u_xlatb65) ? 0.0 : u_xlat9.x;\n    u_xlat9.xyz = vec3(u_xlat62) * u_xlat8.xyz;\n    u_xlat16_44 = dot(u_xlat4.xyz, u_xlat9.xyz);\n    u_xlat16_44 = max(u_xlat16_44, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * _Color.xyz;\n    u_xlatb65 = 0.0<u_xlat16_44;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[2].xyz;\n    u_xlat16_7.xyz = u_xlat16_25.xxx * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlatb9 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb9 = u_xlatb43 && u_xlatb9;\n    u_xlat16_22.xyz = (bool(u_xlatb9)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat28.xyz = (-u_xlat19.xyz) * unity_LightPosition[3].www + unity_LightPosition[3].xyz;\n    u_xlat10 = dot(u_xlat28.xyz, u_xlat28.xyz);\n    u_xlatb29 = unity_LightAtten[3].w<u_xlat10;\n    u_xlatb48 = unity_LightPosition[3].w!=0.0;\n    u_xlatb29 = u_xlatb29 && u_xlatb48;\n    u_xlat48 = unity_LightAtten[3].z * u_xlat10 + 1.0;\n    u_xlat10 = max(u_xlat10, 9.99999997e-07);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat48 = float(1.0) / u_xlat48;\n    u_xlat48 = u_xlat48 * 0.5;\n    u_xlat16_44 = (u_xlatb29) ? 0.0 : u_xlat48;\n    u_xlat29.xyz = u_xlat28.xyz * vec3(u_xlat10);\n    u_xlat16_63 = dot(u_xlat4.xyz, u_xlat29.xyz);\n    u_xlat16_63 = max(u_xlat16_63, 0.0);\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * _Color.xyz;\n    u_xlatb29 = 0.0<u_xlat16_63;\n    u_xlat16_7.xyz = u_xlat16_7.xyz * unity_LightColor[3].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_44) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb9) ? 3 : u_xlati24;\n    u_xlatb48 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb48 = u_xlatb9 && u_xlatb48;\n    u_xlat16_22.xyz = (bool(u_xlatb48)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat11.xyz = (-u_xlat19.xyz) * unity_LightPosition[4].www + unity_LightPosition[4].xyz;\n    u_xlat67 = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlatb68 = unity_LightAtten[4].w<u_xlat67;\n    u_xlatb12 = unity_LightPosition[4].w!=0.0;\n    u_xlatb68 = u_xlatb68 && u_xlatb12;\n    u_xlat12.x = unity_LightAtten[4].z * u_xlat67 + 1.0;\n    u_xlat67 = max(u_xlat67, 9.99999997e-07);\n    u_xlat67 = inversesqrt(u_xlat67);\n    u_xlat12.x = float(1.0) / u_xlat12.x;\n    u_xlat12.x = u_xlat12.x * 0.5;\n    u_xlat16_63 = (u_xlatb68) ? 0.0 : u_xlat12.x;\n    u_xlat12.xyz = vec3(u_xlat67) * u_xlat11.xyz;\n    u_xlat16_7.x = dot(u_xlat4.xyz, u_xlat12.xyz);\n    u_xlat16_7.x = max(u_xlat16_7.x, 0.0);\n    u_xlat16_26.xyz = u_xlat16_7.xxx * _Color.xyz;\n    u_xlatb68 = 0.0<u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat16_26.xyz * unity_LightColor[4].xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_63) * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = min(u_xlat16_7.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_7.xyz = u_xlat16_22.xyz + u_xlat16_7.xyz;\n    u_xlati24 = (u_xlatb48) ? 4 : u_xlati24;\n    u_xlatb12 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb12 = u_xlatb48 && u_xlatb12;\n    u_xlat16_22.xyz = (bool(u_xlatb12)) ? u_xlat16_7.xyz : u_xlat16_22.xyz;\n    u_xlat31.xyz = (-u_xlat19.xyz) * unity_LightPosition[5].www + unity_LightPosition[5].xyz;\n    u_xlat13 = dot(u_xlat31.xyz, u_xlat31.xyz);\n    u_xlatb32 = unity_LightAtten[5].w<u_xlat13;\n    u_xlatb51 = unity_LightPosition[5].w!=0.0;\n    u_xlatb32 = u_xlatb32 && u_xlatb51;\n    u_xlat51 = unity_LightAtten[5].z * u_xlat13 + 1.0;\n    u_xlat13 = max(u_xlat13, 9.99999997e-07);\n    u_xlat13 = inversesqrt(u_xlat13);\n    u_xlat51 = float(1.0) / u_xlat51;\n    u_xlat51 = u_xlat51 * 0.5;\n    u_xlat16_7.x = (u_xlatb32) ? 0.0 : u_xlat51;\n    u_xlat32.xyz = u_xlat31.xyz * vec3(u_xlat13);\n    u_xlat16_26.x = dot(u_xlat4.xyz, u_xlat32.xyz);\n    u_xlat16_26.x = max(u_xlat16_26.x, 0.0);\n    u_xlat16_14.xyz = u_xlat16_26.xxx * _Color.xyz;\n    u_xlatb32 = 0.0<u_xlat16_26.x;\n    u_xlat16_26.xyz = u_xlat16_14.xyz * unity_LightColor[5].xyz;\n    u_xlat16_26.xyz = u_xlat16_7.xxx * u_xlat16_26.xyz;\n    u_xlat16_26.xyz = min(u_xlat16_26.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_26.xyz = u_xlat16_22.xyz + u_xlat16_26.xyz;\n    u_xlati24 = (u_xlatb12) ? 5 : u_xlati24;\n    u_xlatb51 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb51 = u_xlatb12 && u_xlatb51;\n    u_xlat16_22.xyz = (bool(u_xlatb51)) ? u_xlat16_26.xyz : u_xlat16_22.xyz;\n    u_xlat15.xyz = (-u_xlat19.xyz) * unity_LightPosition[6].www + unity_LightPosition[6].xyz;\n    u_xlat70 = dot(u_xlat15.xyz, u_xlat15.xyz);\n    u_xlatb72 = unity_LightAtten[6].w<u_xlat70;\n    u_xlatb16 = unity_LightPosition[6].w!=0.0;\n    u_xlatb72 = u_xlatb72 && u_xlatb16;\n    u_xlat16.x = unity_LightAtten[6].z * u_xlat70 + 1.0;\n    u_xlat70 = max(u_xlat70, 9.99999997e-07);\n    u_xlat70 = inversesqrt(u_xlat70);\n    u_xlat16.x = float(1.0) / u_xlat16.x;\n    u_xlat16.x = u_xlat16.x * 0.5;\n    u_xlat16_26.x = (u_xlatb72) ? 0.0 : u_xlat16.x;\n    u_xlat16.xyz = vec3(u_xlat70) * u_xlat15.xyz;\n    u_xlat16_45 = dot(u_xlat4.xyz, u_xlat16.xyz);\n    u_xlat16_45 = max(u_xlat16_45, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * _Color.xyz;\n    u_xlatb72 = 0.0<u_xlat16_45;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[6].xyz;\n    u_xlat16_14.xyz = u_xlat16_26.xxx * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb51) ? 6 : u_xlati24;\n    u_xlatb16 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb16 = u_xlatb51 && u_xlatb16;\n    u_xlat16_22.xyz = (bool(u_xlatb16)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    u_xlat35.xyz = (-u_xlat19.xyz) * unity_LightPosition[7].www + unity_LightPosition[7].xyz;\n    u_xlat17 = dot(u_xlat35.xyz, u_xlat35.xyz);\n    u_xlatb36 = unity_LightAtten[7].w<u_xlat17;\n    u_xlatb55 = unity_LightPosition[7].w!=0.0;\n    u_xlatb36 = u_xlatb36 && u_xlatb55;\n    u_xlat55 = unity_LightAtten[7].z * u_xlat17 + 1.0;\n    u_xlat17 = max(u_xlat17, 9.99999997e-07);\n    u_xlat17 = inversesqrt(u_xlat17);\n    u_xlat55 = float(1.0) / u_xlat55;\n    u_xlat55 = u_xlat55 * 0.5;\n    u_xlat16_45 = (u_xlatb36) ? 0.0 : u_xlat55;\n    u_xlat36.xyz = u_xlat35.xyz * vec3(u_xlat17);\n    u_xlat16_64 = dot(u_xlat4.xyz, u_xlat36.xyz);\n    u_xlat16_64 = max(u_xlat16_64, 0.0);\n    u_xlat16_14.xyz = vec3(u_xlat16_64) * _Color.xyz;\n    u_xlatb36 = 0.0<u_xlat16_64;\n    u_xlat16_14.xyz = u_xlat16_14.xyz * unity_LightColor[7].xyz;\n    u_xlat16_14.xyz = vec3(u_xlat16_45) * u_xlat16_14.xyz;\n    u_xlat16_14.xyz = min(u_xlat16_14.xyz, vec3(1.0, 1.0, 1.0));\n    u_xlat16_14.xyz = u_xlat16_22.xyz + u_xlat16_14.xyz;\n    u_xlati24 = (u_xlatb16) ? 7 : u_xlati24;\n    u_xlatb24 = u_xlati24<unity_VertexLightParams.x;\n    u_xlatb24 = u_xlatb24 && u_xlatb16;\n    vs_COLOR0.xyz = (bool(u_xlatb24)) ? u_xlat16_14.xyz : u_xlat16_22.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    u_xlat55 = dot(u_xlat19.xyz, u_xlat19.xyz);\n    u_xlat55 = inversesqrt(u_xlat55);\n    u_xlat19.xyz = u_xlat19.xyz * vec3(u_xlat55);\n    u_xlat16_22.xyz = u_xlat21.xyz * vec3(u_xlat61) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_64);\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_22.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_41 = _Shininess * 128.0;\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_6.x;\n    u_xlat16_14.xyz = u_xlat16_22.xxx * unity_LightColor[0].xyz;\n    u_xlat16_14.xyz = (bool(u_xlatb2)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_14.xyz = (bool(u_xlatb5)) ? u_xlat16_14.xyz : vec3(0.0, 0.0, 0.0);\n    u_xlat16_18.xyz = u_xlat1.xyz * vec3(u_xlat58) + (-u_xlat19.xyz);\n    u_xlat16_22.x = dot(u_xlat16_18.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);\n    u_xlat16_18.xyz = u_xlat16_22.xxx * u_xlat16_18.xyz;\n    u_xlat16_22.x = dot(u_xlat4.xyz, u_xlat16_18.xyz);\n    u_xlat16_22.x = max(u_xlat16_22.x, 0.0);\n    u_xlat16_22.x = log2(u_xlat16_22.x);\n    u_xlat16_22.x = u_xlat16_22.x * u_xlat16_41;\n    u_xlat16_22.x = exp2(u_xlat16_22.x);\n    u_xlat16_22.x = min(u_xlat16_22.x, 1.0);\n    u_xlat16_3.x = u_xlat16_22.x * u_xlat16_3.x;\n    u_xlat16_3.xyw = u_xlat16_3.xxx * unity_LightColor[1].xyz + u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb0)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_3.xyw = (bool(u_xlatb43)) ? u_xlat16_3.xyw : u_xlat16_14.xyz;\n    u_xlat16_14.xyz = u_xlat8.xyz * vec3(u_xlat62) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_25.x;\n    u_xlat16_14.xyz = u_xlat16_6.xxx * unity_LightColor[2].xyz + u_xlat16_3.xyw;\n    u_xlat16_14.xyz = (bool(u_xlatb65)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb9)) ? u_xlat16_14.xyz : u_xlat16_3.xyw;\n    u_xlat16_14.xyz = u_xlat28.xyz * vec3(u_xlat10) + (-u_xlat19.xyz);\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_44;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[3].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb29)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb48)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat11.xyz * vec3(u_xlat67) + (-u_xlat19.xyz);\n    u_xlat16_64 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_64 = inversesqrt(u_xlat16_64);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_64);\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_63;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[4].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb68)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb12)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat31.xyz * vec3(u_xlat13) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_7.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[5].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb32)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb51)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.xyz = u_xlat15.xyz * vec3(u_xlat70) + (-u_xlat19.xyz);\n    u_xlat16_14.xyz = u_xlat35.xyz * vec3(u_xlat17) + (-u_xlat19.xyz);\n    u_xlat16_63 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);\n    u_xlat16_63 = inversesqrt(u_xlat16_63);\n    u_xlat16_6.xyz = vec3(u_xlat16_63) * u_xlat16_6.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_6.x = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_6.x = exp2(u_xlat16_6.x);\n    u_xlat16_6.x = min(u_xlat16_6.x, 1.0);\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_26.x;\n    u_xlat16_6.xyz = u_xlat16_6.xxx * unity_LightColor[6].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb72)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyw = (bool(u_xlatb16)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);\n    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);\n    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz;\n    u_xlat16_6.x = dot(u_xlat4.xyz, u_xlat16_6.xyz);\n    u_xlat16_6.x = max(u_xlat16_6.x, 0.0);\n    u_xlat16_6.x = log2(u_xlat16_6.x);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_6.x;\n    u_xlat16_41 = exp2(u_xlat16_41);\n    u_xlat16_41 = min(u_xlat16_41, 1.0);\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_45;\n    u_xlat16_6.xyz = vec3(u_xlat16_41) * unity_LightColor[7].xyz + u_xlat16_3.xyw;\n    u_xlat16_6.xyz = (bool(u_xlatb36)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    u_xlat16_3.xyz = (bool(u_xlatb24)) ? u_xlat16_6.xyz : u_xlat16_3.xyw;\n    vs_COLOR1.xyz = u_xlat16_3.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    vs_TEXCOORD5 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump float u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat12;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    vs_TEXCOORD1.w = 0.0;\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat0.xyz = vec3(u_xlat12) * u_xlat0.xyz;\n    vs_TEXCOORD4.xyz = u_xlat0.xyz;\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat16_2 = u_xlat0.y * u_xlat0.y;\n    u_xlat16_2 = u_xlat0.x * u_xlat0.x + (-u_xlat16_2);\n    u_xlat16_0 = u_xlat0.yzzx * u_xlat0.xyzz;\n    u_xlat16_3.x = dot(unity_SHBr, u_xlat16_0);\n    u_xlat16_3.y = dot(unity_SHBg, u_xlat16_0);\n    u_xlat16_3.z = dot(unity_SHBb, u_xlat16_0);\n    vs_TEXCOORD5.xyz = unity_SHC.xyz * vec3(u_xlat16_2) + u_xlat16_3.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvarying highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 unity_4LightPosX0;\nuniform \tvec4 unity_4LightPosY0;\nuniform \tvec4 unity_4LightPosZ0;\nuniform \tmediump vec4 unity_4LightAtten0;\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nout highp vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec4 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat21;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);\n    vs_TEXCOORD4.w = 0.0;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = u_xlat1.xyz;\n    u_xlat2 = (-u_xlat0.yyyy) + unity_4LightPosY0;\n    u_xlat3 = u_xlat1.yyyy * u_xlat2;\n    u_xlat2 = u_xlat2 * u_xlat2;\n    u_xlat4 = (-u_xlat0.xxxx) + unity_4LightPosX0;\n    u_xlat3 = u_xlat4 * u_xlat1.xxxx + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat4 = (-u_xlat0.zzzz) + unity_4LightPosZ0;\n    vs_TEXCOORD8.xyz = u_xlat0.xyz;\n    u_xlat0 = u_xlat4 * u_xlat1.zzzz + u_xlat3;\n    u_xlat2 = u_xlat4 * u_xlat4 + u_xlat2;\n    u_xlat2 = max(u_xlat2, vec4(9.99999997e-07, 9.99999997e-07, 9.99999997e-07, 9.99999997e-07));\n    u_xlat3 = inversesqrt(u_xlat2);\n    u_xlat2 = u_xlat2 * unity_4LightAtten0 + vec4(1.0, 1.0, 1.0, 1.0);\n    u_xlat2 = vec4(1.0, 1.0, 1.0, 1.0) / u_xlat2;\n    u_xlat0 = u_xlat0 * u_xlat3;\n    u_xlat0 = max(u_xlat0, vec4(0.0, 0.0, 0.0, 0.0));\n    u_xlat0 = u_xlat2 * u_xlat0;\n    u_xlat2.xyz = u_xlat0.yyy * unity_LightColor[1].xyz;\n    u_xlat2.xyz = unity_LightColor[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    u_xlat0.xyz = unity_LightColor[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    u_xlat2.xyz = u_xlat0.xyz * vec3(0.305306017, 0.305306017, 0.305306017) + vec3(0.682171106, 0.682171106, 0.682171106);\n    u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + vec3(0.0125228781, 0.0125228781, 0.0125228781);\n    u_xlat16_5.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_5.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_5.x);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_1);\n    u_xlat16_5.xyz = unity_SHC.xyz * u_xlat16_5.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz * u_xlat2.xyz + u_xlat16_5.xyz;\n    vs_TEXCOORD5.w = 0.0;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nfloat u_xlat23;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat22 = u_xlat14 * u_xlat14;\n    u_xlat23 = u_xlat21 * u_xlat22 + (-u_xlat21);\n    u_xlat21 = u_xlat23 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat22 = u_xlat22 * 0.318309873;\n    u_xlat21 = u_xlat22 / u_xlat21;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat15 = (-u_xlat14) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat14;\n    u_xlat15 = u_xlat8 * u_xlat15 + u_xlat14;\n    u_xlat14 = u_xlat14 * u_xlat7.x;\n    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;\n    u_xlat15 = u_xlat15 * abs(u_xlat1.x);\n    u_xlat16_3.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat8 * u_xlat22 + u_xlat15;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat10_1.xzw = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xzw = u_xlat10_1.xzw * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_4.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb2 = u_xlat16_4.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat2.x;\n    u_xlat2.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_4.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat7.x + -0.5;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_3.x + 1.0;\n    u_xlat16_18 = (-u_xlat8) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;\n    u_xlat0.x = u_xlat8 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xzw * vec3(u_xlat16_25);\n    u_xlat16_25 = (-u_xlat16_25) + 1.0;\n    u_xlat16_25 = u_xlat16_25 + _Glossiness;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_25);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat10_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_4.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat14) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nfloat u_xlat23;\nmediump float u_xlat16_24;\nmediump float u_xlat16_25;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat7.x = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7.x * u_xlat7.x;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat22 = u_xlat14 * u_xlat14;\n    u_xlat23 = u_xlat21 * u_xlat22 + (-u_xlat21);\n    u_xlat21 = u_xlat23 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat22 = u_xlat22 * 0.318309873;\n    u_xlat21 = u_xlat22 / u_xlat21;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat8 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat15 = (-u_xlat14) + 1.0;\n    u_xlat22 = abs(u_xlat1.x) * u_xlat15 + u_xlat14;\n    u_xlat15 = u_xlat8 * u_xlat15 + u_xlat14;\n    u_xlat14 = u_xlat14 * u_xlat7.x;\n    u_xlat14 = (-u_xlat14) * 0.280000001 + 1.0;\n    u_xlat15 = u_xlat15 * abs(u_xlat1.x);\n    u_xlat16_3.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat8 * u_xlat22 + u_xlat15;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat21 = u_xlat21 * u_xlat1.x;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat8 * u_xlat21;\n    u_xlat16_1.xzw = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat16_1.xzw + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xzw = u_xlat16_1.xzw * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_4.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb2 = u_xlat16_4.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat2.x;\n    u_xlat2.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_4.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_4.xyz = u_xlat16_11.xyz * u_xlat16_4.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_4.xyz;\n    u_xlat16_4.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat7.x + -0.5;\n    u_xlat16_11.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_3.x + 1.0;\n    u_xlat16_18 = (-u_xlat8) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x;\n    u_xlat0.x = u_xlat8 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xzw * vec3(u_xlat16_25);\n    u_xlat16_25 = (-u_xlat16_25) + 1.0;\n    u_xlat16_25 = u_xlat16_25 + _Glossiness;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_6.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_25);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + u_xlat16_10.xyz;\n    u_xlat0.xyw = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_24 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_24 = u_xlat16_1.x * _OcclusionStrength + u_xlat16_24;\n    u_xlat16_4.xyz = vec3(u_xlat16_24) * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = vec3(u_xlat14) * u_xlat16_4.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_3.xyz + u_xlat0.xyw;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nlowp float u_xlat10_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nfloat u_xlat30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat29 = u_xlat20 * u_xlat20;\n    u_xlat30 = u_xlat27 * u_xlat29 + (-u_xlat27);\n    u_xlat27 = u_xlat30 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat27 = u_xlat29 / u_xlat27;\n    u_xlat29 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat3.x = (-u_xlat20) + 1.0;\n    u_xlat12 = abs(u_xlat29) * u_xlat3.x + u_xlat20;\n    u_xlat21 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat3.x = u_xlat21 * u_xlat3.x + u_xlat20;\n    u_xlat20 = u_xlat20 * u_xlat11;\n    u_xlat20 = (-u_xlat20) * 0.280000001 + 1.0;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_4.x = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat21 * u_xlat12 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27;\n    u_xlat16_13.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb29 = u_xlat16_5.x!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14.x;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_14.xyz * u_xlat16_5.xxx + u_xlat16_13.xyz;\n    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat2.x + u_xlat2.x;\n    u_xlat16_5.x = u_xlat2.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat11 + -0.5;\n    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_23 = (-u_xlat21) + 1.0;\n    u_xlat16_32 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_32;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_5.x = u_xlat16_14.x * u_xlat16_5.x;\n    u_xlat27 = u_xlat21 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyw = log2(u_xlat16_6.xyz);\n    u_xlat2.xyw = u_xlat2.xyw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyw = exp2(u_xlat2.xyw);\n    u_xlat2.xyw = u_xlat2.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));\n    u_xlat10_27 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_32 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_32 = u_xlat10_27 * _OcclusionStrength + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_32) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_32);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat3.xyw;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat11;\nfloat u_xlat12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat20;\nfloat u_xlat21;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nfloat u_xlat29;\nbool u_xlatb29;\nfloat u_xlat30;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat2.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat11 = (-_Glossiness) + 1.0;\n    u_xlat20 = u_xlat11 * u_xlat11;\n    u_xlat20 = max(u_xlat20, 0.00200000009);\n    u_xlat29 = u_xlat20 * u_xlat20;\n    u_xlat30 = u_xlat27 * u_xlat29 + (-u_xlat27);\n    u_xlat27 = u_xlat30 * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat27 = u_xlat29 / u_xlat27;\n    u_xlat29 = dot(u_xlat1.xyz, (-u_xlat3.xyz));\n    u_xlat3.x = (-u_xlat20) + 1.0;\n    u_xlat12 = abs(u_xlat29) * u_xlat3.x + u_xlat20;\n    u_xlat21 = dot(u_xlat1.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat3.x = u_xlat21 * u_xlat3.x + u_xlat20;\n    u_xlat20 = u_xlat20 * u_xlat11;\n    u_xlat20 = (-u_xlat20) * 0.280000001 + 1.0;\n    u_xlat3.x = abs(u_xlat29) * u_xlat3.x;\n    u_xlat16_4.x = -abs(u_xlat29) + 1.0;\n    u_xlat29 = u_xlat21 * u_xlat12 + u_xlat3.x;\n    u_xlat29 = u_xlat29 + 9.99999975e-06;\n    u_xlat29 = 0.5 / u_xlat29;\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat21 * u_xlat27;\n    u_xlat16_13.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb29 = u_xlat16_5.x!=0.0;\n    u_xlat29 = u_xlatb29 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat29;\n    u_xlat3.xyw = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14.x;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_14.xyz * u_xlat16_5.xxx + u_xlat16_13.xyz;\n    u_xlat3.xyw = u_xlat3.xyw * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat2.x + u_xlat2.x;\n    u_xlat16_5.x = u_xlat2.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat11 + -0.5;\n    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_23 = (-u_xlat21) + 1.0;\n    u_xlat16_32 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_32;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_5.x = u_xlat16_14.x * u_xlat16_5.x;\n    u_xlat27 = u_xlat21 * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyw = log2(u_xlat16_6.xyz);\n    u_xlat2.xyw = u_xlat2.xyw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyw = exp2(u_xlat2.xyw);\n    u_xlat2.xyw = u_xlat2.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyw = max(u_xlat2.xyw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_27 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_32 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_32 = u_xlat16_27 * _OcclusionStrength + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat2.xyw * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_32) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_32);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat3.xyw;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nfloat u_xlat28;\nlowp float u_xlat10_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat9.x * u_xlat9.x;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat3.x = u_xlat27 * u_xlat28 + (-u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat28 = u_xlat28 * 0.318309873;\n    u_xlat27 = u_xlat28 / u_xlat27;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat10 = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat1.x) * u_xlat10 + u_xlat18;\n    u_xlat28 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);\n    u_xlat10 = u_xlat28 * u_xlat10 + u_xlat18;\n    u_xlat18 = u_xlat18 * u_xlat9.x;\n    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;\n    u_xlat10 = u_xlat10 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat28 * u_xlat19 + u_xlat10;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat27 = u_xlat27 * u_xlat1.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat28 * u_xlat27;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb3 = u_xlat16_5.x!=0.0;\n    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat3.x;\n    u_xlat3.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14.x;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_14.xyz * u_xlat16_5.xxx + u_xlat16_13.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_23 = (-u_xlat28) + 1.0;\n    u_xlat16_32 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_32;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_5.x = u_xlat16_14.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyw = log2(u_xlat16_6.xyz);\n    u_xlat0.xyw = u_xlat0.xyw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyw = exp2(u_xlat0.xyw);\n    u_xlat0.xyw = u_xlat0.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));\n    u_xlat10_28 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_32 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_32 = u_xlat10_28 * _OcclusionStrength + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat0.xyw * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_32) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat18) * u_xlat16_6.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_32);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nfloat u_xlat28;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat9.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat9.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat9.xyz;\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat9.x * u_xlat9.x;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat28 = u_xlat18 * u_xlat18;\n    u_xlat3.x = u_xlat27 * u_xlat28 + (-u_xlat27);\n    u_xlat27 = u_xlat3.x * u_xlat27 + 1.0;\n    u_xlat27 = u_xlat27 * u_xlat27 + 1.00000001e-07;\n    u_xlat28 = u_xlat28 * 0.318309873;\n    u_xlat27 = u_xlat28 / u_xlat27;\n    u_xlat1.x = dot(u_xlat2.xyz, (-u_xlat1.xyz));\n    u_xlat10 = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat1.x) * u_xlat10 + u_xlat18;\n    u_xlat28 = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat28 = clamp(u_xlat28, 0.0, 1.0);\n    u_xlat10 = u_xlat28 * u_xlat10 + u_xlat18;\n    u_xlat18 = u_xlat18 * u_xlat9.x;\n    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;\n    u_xlat10 = u_xlat10 * abs(u_xlat1.x);\n    u_xlat16_4.x = -abs(u_xlat1.x) + 1.0;\n    u_xlat1.x = u_xlat28 * u_xlat19 + u_xlat10;\n    u_xlat1.x = u_xlat1.x + 9.99999975e-06;\n    u_xlat1.x = 0.5 / u_xlat1.x;\n    u_xlat27 = u_xlat27 * u_xlat1.x;\n    u_xlat27 = u_xlat27 * 3.14159274;\n    u_xlat27 = max(u_xlat27, 9.99999975e-05);\n    u_xlat27 = sqrt(u_xlat27);\n    u_xlat27 = u_xlat28 * u_xlat27;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_13.xyz, u_xlat16_13.xyz);\n    u_xlatb3 = u_xlat16_5.x!=0.0;\n    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);\n    u_xlat27 = u_xlat27 * u_xlat3.x;\n    u_xlat3.xyz = vec3(u_xlat27) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat0.x) + 1.0;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_14.x;\n    u_xlat16_14.xyz = (-u_xlat16_13.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_14.xyz * u_xlat16_5.xxx + u_xlat16_13.xyz;\n    u_xlat3.xyz = u_xlat3.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat9.x + -0.5;\n    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = u_xlat16_14.x * u_xlat16_14.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14.x;\n    u_xlat16_14.x = u_xlat16_5.x * u_xlat16_4.x + 1.0;\n    u_xlat16_23 = (-u_xlat28) + 1.0;\n    u_xlat16_32 = u_xlat16_23 * u_xlat16_23;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_23 = u_xlat16_23 * u_xlat16_32;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_23 + 1.0;\n    u_xlat16_5.x = u_xlat16_14.x * u_xlat16_5.x;\n    u_xlat0.x = u_xlat28 * u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyw = log2(u_xlat16_6.xyz);\n    u_xlat0.xyw = u_xlat0.xyw * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat0.xyw = exp2(u_xlat0.xyw);\n    u_xlat0.xyw = u_xlat0.xyw * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat0.xyw = max(u_xlat0.xyw, vec3(0.0, 0.0, 0.0));\n    u_xlat16_28 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_32 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_32 = u_xlat16_28 * _OcclusionStrength + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat0.xyw * vec3(u_xlat16_32) + u_xlat16_5.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_32) * unity_IndirectSpecColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat18) * u_xlat16_6.xyz;\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_7.xyz = u_xlat1.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat16_32 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_32);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz + u_xlat3.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nlowp float u_xlat10_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat26 = u_xlat18 * u_xlat18;\n    u_xlat27 = u_xlat24 * u_xlat26 + (-u_xlat24);\n    u_xlat24 = u_xlat27 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat26 = u_xlat26 * 0.318309873;\n    u_xlat24 = u_xlat26 / u_xlat24;\n    u_xlat26 = dot(u_xlat4.xyz, (-u_xlat3.xyz));\n    u_xlat3.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat26) * u_xlat11.x + u_xlat18;\n    u_xlat11.x = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * u_xlat10;\n    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;\n    u_xlat11.x = abs(u_xlat26) * u_xlat11.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat3.x * u_xlat19 + u_xlat11.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_5.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_5.xxx + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat2.x + u_xlat2.x;\n    u_xlat16_5.x = u_xlat2.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10 + -0.5;\n    u_xlat16_13.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_1.x + 1.0;\n    u_xlat16_21 = (-u_xlat3.x) + 1.0;\n    u_xlat16_29 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_29;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_21 + 1.0;\n    u_xlat16_5.x = u_xlat16_13.x * u_xlat16_5.x;\n    u_xlat24 = u_xlat3.x * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_29);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat11.xyz;\n    u_xlat10_24 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_25 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_25 = u_xlat10_24 * _OcclusionStrength + u_xlat16_25;\n    u_xlat16_5.xyz = vec3(u_xlat16_25) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyz;\n    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump vec3 u_xlat16_13;\nfloat u_xlat18;\nfloat u_xlat19;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nmediump float u_xlat16_24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nfloat u_xlat26;\nbool u_xlatb26;\nfloat u_xlat27;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat2.x = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat26 = u_xlat18 * u_xlat18;\n    u_xlat27 = u_xlat24 * u_xlat26 + (-u_xlat24);\n    u_xlat24 = u_xlat27 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat26 = u_xlat26 * 0.318309873;\n    u_xlat24 = u_xlat26 / u_xlat24;\n    u_xlat26 = dot(u_xlat4.xyz, (-u_xlat3.xyz));\n    u_xlat3.x = dot(u_xlat4.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat26) * u_xlat11.x + u_xlat18;\n    u_xlat11.x = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * u_xlat10;\n    u_xlat18 = (-u_xlat18) * 0.280000001 + 1.0;\n    u_xlat11.x = abs(u_xlat26) * u_xlat11.x;\n    u_xlat16_1.x = -abs(u_xlat26) + 1.0;\n    u_xlat26 = u_xlat3.x * u_xlat19 + u_xlat11.x;\n    u_xlat26 = u_xlat26 + 9.99999975e-06;\n    u_xlat26 = 0.5 / u_xlat26;\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb26 = u_xlat16_5.x!=0.0;\n    u_xlat26 = u_xlatb26 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat26;\n    u_xlat11.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_5.xyz = u_xlat16_13.xyz * u_xlat16_5.xxx + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat11.xyz * u_xlat16_5.xyz;\n    u_xlat16_5.x = u_xlat2.x + u_xlat2.x;\n    u_xlat16_5.x = u_xlat2.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat10 + -0.5;\n    u_xlat16_13.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x;\n    u_xlat16_13.x = u_xlat16_5.x * u_xlat16_1.x + 1.0;\n    u_xlat16_21 = (-u_xlat3.x) + 1.0;\n    u_xlat16_29 = u_xlat16_21 * u_xlat16_21;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_21 = u_xlat16_21 * u_xlat16_29;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_21 + 1.0;\n    u_xlat16_5.x = u_xlat16_13.x * u_xlat16_5.x;\n    u_xlat24 = u_xlat3.x * u_xlat16_5.x;\n    u_xlat16_5.xyz = vec3(u_xlat24) * _LightColor0.xyz;\n    u_xlat16_29 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_29);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = u_xlat16_29 + _Glossiness;\n    u_xlat16_29 = clamp(u_xlat16_29, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(u_xlat16_29);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_7.xyz + u_xlat16_9.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_5.xyz + u_xlat11.xyz;\n    u_xlat16_24 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_25 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_25 = u_xlat16_24 * _OcclusionStrength + u_xlat16_25;\n    u_xlat16_5.xyz = vec3(u_xlat16_25) * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat0.xyz;\n    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3 = -abs(u_xlat24) + 1.0;\n    u_xlat16_11.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_11.x;\n    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8.x = max(u_xlat8.x, 0.00100000005);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;\n    u_xlat8.x = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_11.x = u_xlat8.x * u_xlat16_11.x;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat8.x + -0.5;\n    u_xlat16_19 = u_xlat16_11.x * u_xlat16_3 + 1.0;\n    u_xlat16_27 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27 + 1.0;\n    u_xlat16_11.x = u_xlat16_19 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = u_xlat8.x * u_xlat8.x;\n    u_xlat0.x = max(u_xlat0.x, 0.00200000009);\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat10_8 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_8 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz + u_xlat16_4.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3 = -abs(u_xlat24) + 1.0;\n    u_xlat16_11.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_11.x;\n    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8.x = max(u_xlat8.x, 0.00100000005);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;\n    u_xlat8.x = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_11.x = u_xlat8.x * u_xlat16_11.x;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat8.x + -0.5;\n    u_xlat16_19 = u_xlat16_11.x * u_xlat16_3 + 1.0;\n    u_xlat16_27 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27 + 1.0;\n    u_xlat16_11.x = u_xlat16_19 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = u_xlat8.x * u_xlat8.x;\n    u_xlat0.x = max(u_xlat0.x, 0.00200000009);\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_8 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_8 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz + u_xlat16_4.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nlowp float u_xlat10_26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat24 + u_xlat24;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x;\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat24 + -0.5;\n    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;\n    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat16_9 = -abs(u_xlat3.x) + 1.0;\n    u_xlat16_17 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_1.x * u_xlat16_9 + 1.0;\n    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_25 = (-u_xlat3.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_25 + 1.0;\n    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat3.x * u_xlat16_1.x;\n    u_xlat16_1.xzw = u_xlat3.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_4.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_26 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_26 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_1.xzw = u_xlat2.xyz * u_xlat16_4.xxx + u_xlat16_1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = (-u_xlat24) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat24);\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_28) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_28);\n    u_xlat16_28 = u_xlat16_29 + _Glossiness;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_28);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xzw + u_xlat16_4.xyz;\n    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat24 + u_xlat24;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x;\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat24 + -0.5;\n    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;\n    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat16_9 = -abs(u_xlat3.x) + 1.0;\n    u_xlat16_17 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_1.x * u_xlat16_9 + 1.0;\n    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_25 = (-u_xlat3.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_25 + 1.0;\n    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat3.x * u_xlat16_1.x;\n    u_xlat16_1.xzw = u_xlat3.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_4.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_26 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_1.xzw = u_xlat2.xyz * u_xlat16_4.xxx + u_xlat16_1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = (-u_xlat24) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat24);\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_28) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_28);\n    u_xlat16_28 = u_xlat16_29 + _Glossiness;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_28);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xzw + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat0.x + -0.5;\n    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat3.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;\n    u_xlat8.x = dot(u_xlat3.xyz, (-u_xlat1.xyz));\n    u_xlat16_10 = -abs(u_xlat8.x) + 1.0;\n    u_xlat16_18 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_10 + 1.0;\n    u_xlat8.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_26 = (-u_xlat8.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_4.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26 + 1.0;\n    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat16_2.x;\n    u_xlat16_2.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat8.xyz = log2(u_xlat16_4.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat8.xyz = exp2(u_xlat8.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_1.x * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_2.xzw = u_xlat8.xyz * u_xlat16_4.xxx + u_xlat16_2.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat8.x = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_4.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat0.x + -0.5;\n    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat3.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;\n    u_xlat8.x = dot(u_xlat3.xyz, (-u_xlat1.xyz));\n    u_xlat16_10 = -abs(u_xlat8.x) + 1.0;\n    u_xlat16_18 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_10 + 1.0;\n    u_xlat8.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_26 = (-u_xlat8.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_4.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26 + 1.0;\n    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat16_2.x;\n    u_xlat16_2.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat8.xyz = log2(u_xlat16_4.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat8.xyz = exp2(u_xlat8.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_1.x * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_2.xzw = u_xlat8.xyz * u_xlat16_4.xxx + u_xlat16_2.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat8.x = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_4.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nvec3 u_xlat11;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat16_1 = -abs(u_xlat27) + 1.0;\n    u_xlat16_10.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10.x;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat11.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat11.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_10.x = u_xlat27 + u_xlat27;\n    u_xlat16_10.x = u_xlat27 * u_xlat16_10.x;\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat27 + -0.5;\n    u_xlat16_19 = u_xlat16_10.x * u_xlat16_1 + 1.0;\n    u_xlat16_28 = (-u_xlat2.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_28 + 1.0;\n    u_xlat16_10.x = u_xlat16_19 * u_xlat16_10.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = (-u_xlat27) * 0.280000001 + 1.0;\n    u_xlat10_2.x = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_5.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_5.x = u_xlat10_2.x * _OcclusionStrength + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_33 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_32);\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat10_2.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nvec3 u_xlat11;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat16_1 = -abs(u_xlat27) + 1.0;\n    u_xlat16_10.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10.x;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat11.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat11.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_10.x = u_xlat27 + u_xlat27;\n    u_xlat16_10.x = u_xlat27 * u_xlat16_10.x;\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat27 + -0.5;\n    u_xlat16_19 = u_xlat16_10.x * u_xlat16_1 + 1.0;\n    u_xlat16_28 = (-u_xlat2.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_28 + 1.0;\n    u_xlat16_10.x = u_xlat16_19 * u_xlat16_10.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = (-u_xlat27) * 0.280000001 + 1.0;\n    u_xlat16_2.x = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_5.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_5.x = u_xlat16_2.x * _OcclusionStrength + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_33 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_32);\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb42 = u_xlat16_2.x<0.0;\n    if(u_xlatb42){discard;}\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp float u_xlat10_4;\nmediump vec3 u_xlat16_5;\nlowp vec4 u_xlat10_5;\nmediump vec3 u_xlat16_6;\nlowp vec4 u_xlat10_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat10_4 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat10_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat10_6 = textureCubeLodEXT(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat10_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat10_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat10_5 = textureCubeLodEXT(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat10_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat10_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat10_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump float u_xlat16_4;\nmediump vec4 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec4 u_xlat16_12;\nmediump vec3 u_xlat16_13;\nfloat u_xlat14;\nvec3 u_xlat15;\nvec3 u_xlat18;\nvec3 u_xlat25;\nmediump vec3 u_xlat16_25;\nmediump float u_xlat16_26;\nfloat u_xlat28;\nfloat u_xlat29;\nmediump float u_xlat16_40;\nfloat u_xlat42;\nbool u_xlatb42;\nfloat u_xlat43;\nmediump float u_xlat16_44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_47;\nmediump float u_xlat16_53;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_44 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_44);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat1.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat15.xyz = u_xlat1.xxx * vs_TEXCOORD1.xyz;\n    u_xlat16_4 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_45 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_45 = u_xlat16_4 * _OcclusionStrength + u_xlat16_45;\n    u_xlat4 = (-_Glossiness) + 1.0;\n    u_xlat16_5.x = dot(u_xlat15.xyz, u_xlat0.xyz);\n    u_xlat16_5.x = u_xlat16_5.x + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-u_xlat16_5.xxx) + u_xlat15.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_6.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_6.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_6.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_6.xyz = max(u_xlat16_6.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat18.xyz = log2(u_xlat16_6.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat18.xyz = exp2(u_xlat18.xyz);\n    u_xlat18.xyz = u_xlat18.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat18.xyz = max(u_xlat18.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlatb42 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb42){\n        u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n        u_xlat42 = inversesqrt(u_xlat42);\n        u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n        u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n        u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n        u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat8;\n            hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n            hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n            hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n            u_xlat8 = hlslcc_movcTemp;\n        }\n        u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n        u_xlat42 = min(u_xlat8.z, u_xlat42);\n        u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n    } else {\n        u_xlat7.xyz = u_xlat16_5.xyz;\n    }\n    u_xlat16_47 = (-u_xlat4) * 0.699999988 + 1.70000005;\n    u_xlat16_47 = u_xlat4 * u_xlat16_47;\n    u_xlat16_47 = u_xlat16_47 * 6.0;\n    u_xlat16_6 = textureLod(unity_SpecCube0, u_xlat7.xyz, u_xlat16_47);\n    u_xlat16_11.x = u_xlat16_6.w + -1.0;\n    u_xlat16_11.x = unity_SpecCube0_HDR.w * u_xlat16_11.x + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube0_HDR.x;\n    u_xlat16_25.xyz = u_xlat16_6.xyz * u_xlat16_11.xxx;\n    u_xlatb42 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb42){\n        u_xlatb42 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb42){\n            u_xlat42 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);\n            u_xlat42 = inversesqrt(u_xlat42);\n            u_xlat7.xyz = vec3(u_xlat42) * u_xlat16_5.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat7.xyz;\n            u_xlat9.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat9.xyz = u_xlat9.xyz / u_xlat7.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat8;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat8.x : u_xlat9.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat8.y : u_xlat9.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat8.z : u_xlat9.z;\n                u_xlat8 = hlslcc_movcTemp;\n            }\n            u_xlat42 = min(u_xlat8.y, u_xlat8.x);\n            u_xlat42 = min(u_xlat8.z, u_xlat42);\n            u_xlat8.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat7.xyz = u_xlat7.xyz * vec3(u_xlat42) + u_xlat8.xyz;\n        } else {\n            u_xlat7.xyz = u_xlat16_5.xyz;\n        }\n        u_xlat16_5 = textureLod(unity_SpecCube1, u_xlat7.xyz, u_xlat16_47);\n        u_xlat16_12.x = u_xlat16_5.w + -1.0;\n        u_xlat16_12.x = unity_SpecCube1_HDR.w * u_xlat16_12.x + 1.0;\n        u_xlat16_12.x = u_xlat16_12.x * unity_SpecCube1_HDR.x;\n        u_xlat16_12.xyz = u_xlat16_5.xyz * u_xlat16_12.xxx;\n        u_xlat7.xyz = u_xlat16_11.xxx * u_xlat16_6.xyz + (-u_xlat16_12.xyz);\n        u_xlat25.xyz = unity_SpecCube0_BoxMin.www * u_xlat7.xyz + u_xlat16_12.xyz;\n        u_xlat16_25.xyz = u_xlat25.xyz;\n    }\n    u_xlat16_11.xyz = vec3(u_xlat16_45) * u_xlat16_25.xyz;\n    u_xlat7.xyz = (-vs_TEXCOORD1.xyz) * u_xlat1.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat42 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat42 = max(u_xlat42, 0.00100000005);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat7.xyz = vec3(u_xlat42) * u_xlat7.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, (-u_xlat15.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat7.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = dot(_WorldSpaceLightPos0.xyz, u_xlat7.xyz);\n    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);\n    u_xlat16_53 = u_xlat14 + u_xlat14;\n    u_xlat16_53 = u_xlat14 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat4 + -0.5;\n    u_xlat16_12.x = (-u_xlat1.x) + 1.0;\n    u_xlat16_26 = u_xlat16_12.x * u_xlat16_12.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_12.x * u_xlat16_26;\n    u_xlat16_12.x = u_xlat16_53 * u_xlat16_12.x + 1.0;\n    u_xlat16_26 = -abs(u_xlat42) + 1.0;\n    u_xlat16_40 = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_40 = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_40;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_26 + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_12.x;\n    u_xlat28 = u_xlat1.x * u_xlat16_53;\n    u_xlat15.x = u_xlat4 * u_xlat4;\n    u_xlat15.x = max(u_xlat15.x, 0.00200000009);\n    u_xlat29 = (-u_xlat15.x) + 1.0;\n    u_xlat43 = abs(u_xlat42) * u_xlat29 + u_xlat15.x;\n    u_xlat29 = u_xlat1.x * u_xlat29 + u_xlat15.x;\n    u_xlat42 = abs(u_xlat42) * u_xlat29;\n    u_xlat42 = u_xlat1.x * u_xlat43 + u_xlat42;\n    u_xlat42 = u_xlat42 + 9.99999975e-06;\n    u_xlat42 = 0.5 / u_xlat42;\n    u_xlat29 = u_xlat15.x * u_xlat15.x;\n    u_xlat43 = u_xlat0.x * u_xlat29 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat43 * u_xlat0.x + 1.0;\n    u_xlat29 = u_xlat29 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat29 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat42;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat42 = u_xlat15.x * u_xlat4;\n    u_xlat42 = (-u_xlat42) * 0.280000001 + 1.0;\n    u_xlat16_53 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_53!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_44 = (-u_xlat16_44) + 1.0;\n    u_xlat16_44 = u_xlat16_44 + _Glossiness;\n    u_xlat16_44 = clamp(u_xlat16_44, 0.0, 1.0);\n    u_xlat16_12.xzw = vec3(u_xlat28) * _LightColor0.xyz;\n    u_xlat16_12.xzw = u_xlat18.xyz * vec3(u_xlat16_45) + u_xlat16_12.xzw;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_45 = (-u_xlat14) + 1.0;\n    u_xlat16_53 = u_xlat16_45 * u_xlat16_45;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_45 = u_xlat16_45 * u_xlat16_53;\n    u_xlat16_13.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_13.xyz = u_xlat16_13.xyz * vec3(u_xlat16_45) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_13.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_12.xzw + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_11.xyz * vec3(u_xlat42);\n    u_xlat16_11.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_44);\n    u_xlat16_2.xyz = vec3(u_xlat16_26) * u_xlat16_11.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n#if !defined(GL_EXT_shader_texture_lod)\n#define texture1DLodEXT texture1D\n#define texture2DLodEXT texture2D\n#define texture2DProjLodEXT texture2DProj\n#define texture3DLodEXT texture3D\n#define textureCubeLodEXT textureCube\n#endif\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nuniform lowp samplerCube unity_SpecCube1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nvec3 u_xlat5;\nlowp vec4 u_xlat10_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nlowp float u_xlat10_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat10_40 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat10_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat10_5 = textureCubeLodEXT(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat10_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat10_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat10_4 = textureCubeLodEXT(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat10_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat10_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat10_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 unity_SpecCube0_BoxMax;\nuniform \tvec4 unity_SpecCube0_BoxMin;\nuniform \tvec4 unity_SpecCube0_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 unity_SpecCube1_BoxMax;\nuniform \tvec4 unity_SpecCube1_BoxMin;\nuniform \tvec4 unity_SpecCube1_ProbePosition;\nuniform \tmediump vec4 unity_SpecCube1_HDR;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform \tmediump vec4 _EmissionColor;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(3) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(4) uniform mediump samplerCube unity_SpecCube1;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nbool u_xlatb5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nvec3 u_xlat8;\nbvec3 u_xlatb8;\nmediump vec3 u_xlat16_9;\nbvec3 u_xlatb10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nfloat u_xlat13;\nfloat u_xlat14;\nvec3 u_xlat22;\nmediump vec3 u_xlat16_22;\nmediump vec3 u_xlat16_24;\nfloat u_xlat26;\nfloat u_xlat27;\nfloat u_xlat39;\nbool u_xlatb39;\nfloat u_xlat40;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nmediump float u_xlat16_43;\nfloat u_xlat44;\nbool u_xlatb44;\nmediump float u_xlat16_48;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_2.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb39 = u_xlat16_2.x<0.0;\n    if(u_xlatb39){discard;}\n    u_xlat16_2.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat16_2.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_2.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_41 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_3.xyz = u_xlat1.xyz * vec3(u_xlat16_41);\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat39 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat1.xyz = vec3(u_xlat39) * vs_TEXCOORD1.xyz;\n    u_xlat16_40 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_42 = (-_OcclusionStrength) + 1.0;\n    u_xlat16_42 = u_xlat16_40 * _OcclusionStrength + u_xlat16_42;\n    u_xlat40 = (-_Glossiness) + 1.0;\n    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-u_xlat16_4.xxx) + u_xlat1.xyz;\n    u_xlatb5 = 0.0<unity_SpecCube0_ProbePosition.w;\n    if(u_xlatb5){\n        u_xlat5.x = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n        u_xlat5.x = inversesqrt(u_xlat5.x);\n        u_xlat5.xyz = u_xlat16_4.xyz * u_xlat5.xxx;\n        u_xlat6.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMax.xyz;\n        u_xlat6.xyz = u_xlat6.xyz / u_xlat5.xyz;\n        u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube0_BoxMin.xyz;\n        u_xlat7.xyz = u_xlat7.xyz / u_xlat5.xyz;\n        u_xlatb8.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat5.xyzx).xyz;\n        {\n            vec3 hlslcc_movcTemp = u_xlat6;\n            hlslcc_movcTemp.x = (u_xlatb8.x) ? u_xlat6.x : u_xlat7.x;\n            hlslcc_movcTemp.y = (u_xlatb8.y) ? u_xlat6.y : u_xlat7.y;\n            hlslcc_movcTemp.z = (u_xlatb8.z) ? u_xlat6.z : u_xlat7.z;\n            u_xlat6 = hlslcc_movcTemp;\n        }\n        u_xlat44 = min(u_xlat6.y, u_xlat6.x);\n        u_xlat44 = min(u_xlat6.z, u_xlat44);\n        u_xlat6.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube0_ProbePosition.xyz);\n        u_xlat5.xyz = u_xlat5.xyz * vec3(u_xlat44) + u_xlat6.xyz;\n    } else {\n        u_xlat5.xyz = u_xlat16_4.xyz;\n    }\n    u_xlat16_43 = (-u_xlat40) * 0.699999988 + 1.70000005;\n    u_xlat16_43 = u_xlat40 * u_xlat16_43;\n    u_xlat16_43 = u_xlat16_43 * 6.0;\n    u_xlat16_5 = textureLod(unity_SpecCube0, u_xlat5.xyz, u_xlat16_43);\n    u_xlat16_9.x = u_xlat16_5.w + -1.0;\n    u_xlat16_9.x = unity_SpecCube0_HDR.w * u_xlat16_9.x + 1.0;\n    u_xlat16_9.x = u_xlat16_9.x * unity_SpecCube0_HDR.x;\n    u_xlat16_22.xyz = u_xlat16_5.xyz * u_xlat16_9.xxx;\n    u_xlatb44 = unity_SpecCube0_BoxMin.w<0.999989986;\n    if(u_xlatb44){\n        u_xlatb44 = 0.0<unity_SpecCube1_ProbePosition.w;\n        if(u_xlatb44){\n            u_xlat44 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);\n            u_xlat44 = inversesqrt(u_xlat44);\n            u_xlat6.xyz = u_xlat16_4.xyz * vec3(u_xlat44);\n            u_xlat7.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMax.xyz;\n            u_xlat7.xyz = u_xlat7.xyz / u_xlat6.xyz;\n            u_xlat8.xyz = (-vs_TEXCOORD8.xyz) + unity_SpecCube1_BoxMin.xyz;\n            u_xlat8.xyz = u_xlat8.xyz / u_xlat6.xyz;\n            u_xlatb10.xyz = lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;\n            {\n                vec3 hlslcc_movcTemp = u_xlat7;\n                hlslcc_movcTemp.x = (u_xlatb10.x) ? u_xlat7.x : u_xlat8.x;\n                hlslcc_movcTemp.y = (u_xlatb10.y) ? u_xlat7.y : u_xlat8.y;\n                hlslcc_movcTemp.z = (u_xlatb10.z) ? u_xlat7.z : u_xlat8.z;\n                u_xlat7 = hlslcc_movcTemp;\n            }\n            u_xlat44 = min(u_xlat7.y, u_xlat7.x);\n            u_xlat44 = min(u_xlat7.z, u_xlat44);\n            u_xlat7.xyz = vs_TEXCOORD8.xyz + (-unity_SpecCube1_ProbePosition.xyz);\n            u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat44) + u_xlat7.xyz;\n        } else {\n            u_xlat6.xyz = u_xlat16_4.xyz;\n        }\n        u_xlat16_4 = textureLod(unity_SpecCube1, u_xlat6.xyz, u_xlat16_43);\n        u_xlat16_11.x = u_xlat16_4.w + -1.0;\n        u_xlat16_11.x = unity_SpecCube1_HDR.w * u_xlat16_11.x + 1.0;\n        u_xlat16_11.x = u_xlat16_11.x * unity_SpecCube1_HDR.x;\n        u_xlat16_11.xyz = u_xlat16_4.xyz * u_xlat16_11.xxx;\n        u_xlat5.xyz = u_xlat16_9.xxx * u_xlat16_5.xyz + (-u_xlat16_11.xyz);\n        u_xlat22.xyz = unity_SpecCube0_BoxMin.www * u_xlat5.xyz + u_xlat16_11.xyz;\n        u_xlat16_22.xyz = u_xlat22.xyz;\n    }\n    u_xlat16_9.xyz = vec3(u_xlat16_42) * u_xlat16_22.xyz;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat39) + _WorldSpaceLightPos0.xyz;\n    u_xlat39 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat39 = max(u_xlat39, 0.00100000005);\n    u_xlat39 = inversesqrt(u_xlat39);\n    u_xlat5.xyz = vec3(u_xlat39) * u_xlat5.xyz;\n    u_xlat39 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat1.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat5.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat13 = dot(_WorldSpaceLightPos0.xyz, u_xlat5.xyz);\n    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);\n    u_xlat16_42 = u_xlat13 + u_xlat13;\n    u_xlat16_42 = u_xlat13 * u_xlat16_42;\n    u_xlat16_42 = u_xlat16_42 * u_xlat40 + -0.5;\n    u_xlat16_48 = (-u_xlat1.x) + 1.0;\n    u_xlat16_11.x = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_11.x;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_48 + 1.0;\n    u_xlat16_11.x = -abs(u_xlat39) + 1.0;\n    u_xlat16_24.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_24.x = u_xlat16_24.x * u_xlat16_24.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_24.x;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_11.x + 1.0;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat26 = u_xlat1.x * u_xlat16_42;\n    u_xlat14 = u_xlat40 * u_xlat40;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat27 = (-u_xlat14) + 1.0;\n    u_xlat5.x = abs(u_xlat39) * u_xlat27 + u_xlat14;\n    u_xlat27 = u_xlat1.x * u_xlat27 + u_xlat14;\n    u_xlat39 = abs(u_xlat39) * u_xlat27;\n    u_xlat39 = u_xlat1.x * u_xlat5.x + u_xlat39;\n    u_xlat39 = u_xlat39 + 9.99999975e-06;\n    u_xlat39 = 0.5 / u_xlat39;\n    u_xlat27 = u_xlat14 * u_xlat14;\n    u_xlat5.x = u_xlat0.x * u_xlat27 + (-u_xlat0.x);\n    u_xlat0.x = u_xlat5.x * u_xlat0.x + 1.0;\n    u_xlat27 = u_xlat27 * 0.318309873;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x + 1.00000001e-07;\n    u_xlat0.x = u_xlat27 / u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat39;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat39 = u_xlat14 * u_xlat40;\n    u_xlat39 = (-u_xlat39) * 0.280000001 + 1.0;\n    u_xlat16_42 = dot(u_xlat16_2.xyz, u_xlat16_2.xyz);\n    u_xlatb1 = u_xlat16_42!=0.0;\n    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat0.x * u_xlat1.x;\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 + _Glossiness;\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_24.xyz = vec3(u_xlat26) * _LightColor0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_42 = (-u_xlat13) + 1.0;\n    u_xlat16_48 = u_xlat16_42 * u_xlat16_42;\n    u_xlat16_48 = u_xlat16_48 * u_xlat16_48;\n    u_xlat16_42 = u_xlat16_42 * u_xlat16_48;\n    u_xlat16_12.xyz = (-u_xlat16_2.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_12.xyz = u_xlat16_12.xyz * vec3(u_xlat16_42) + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat1.xyz * u_xlat16_12.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_24.xyz + u_xlat0.xyz;\n    u_xlat16_3.xyz = u_xlat16_9.xyz * vec3(u_xlat39);\n    u_xlat16_9.xyz = (-u_xlat16_2.xyz) + vec3(u_xlat16_41);\n    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_9.xyz + u_xlat16_2.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_2.xyz + u_xlat0.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nlowp float u_xlat10_8;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3 = -abs(u_xlat24) + 1.0;\n    u_xlat16_11.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_11.x;\n    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8.x = max(u_xlat8.x, 0.00100000005);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;\n    u_xlat8.x = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_11.x = u_xlat8.x * u_xlat16_11.x;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat8.x + -0.5;\n    u_xlat16_19 = u_xlat16_11.x * u_xlat16_3 + 1.0;\n    u_xlat16_27 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27 + 1.0;\n    u_xlat16_11.x = u_xlat16_19 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = u_xlat8.x * u_xlat8.x;\n    u_xlat0.x = max(u_xlat0.x, 0.00200000009);\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat10_8 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_8 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_8;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat24 = dot(u_xlat0.xyz, (-u_xlat1.xyz));\n    u_xlat0.x = dot(u_xlat0.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3 = -abs(u_xlat24) + 1.0;\n    u_xlat16_11.x = u_xlat16_3 * u_xlat16_3;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_3 = u_xlat16_3 * u_xlat16_11.x;\n    u_xlat8.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat8.x = max(u_xlat8.x, 0.00100000005);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz;\n    u_xlat8.x = dot(_WorldSpaceLightPos0.xyz, u_xlat8.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_11.x = u_xlat8.x + u_xlat8.x;\n    u_xlat16_11.x = u_xlat8.x * u_xlat16_11.x;\n    u_xlat8.x = (-_Glossiness) + 1.0;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat8.x + -0.5;\n    u_xlat16_19 = u_xlat16_11.x * u_xlat16_3 + 1.0;\n    u_xlat16_27 = (-u_xlat0.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_27 + 1.0;\n    u_xlat16_11.x = u_xlat16_19 * u_xlat16_11.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.x = u_xlat8.x * u_xlat8.x;\n    u_xlat0.x = max(u_xlat0.x, 0.00200000009);\n    u_xlat0.x = u_xlat0.x * u_xlat8.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_8 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_8 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_3) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_11.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nlowp float u_xlat10_26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat24 + u_xlat24;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x;\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat24 + -0.5;\n    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;\n    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat16_9 = -abs(u_xlat3.x) + 1.0;\n    u_xlat16_17 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_1.x * u_xlat16_9 + 1.0;\n    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_25 = (-u_xlat3.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_25 + 1.0;\n    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat3.x * u_xlat16_1.x;\n    u_xlat16_1.xzw = u_xlat3.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_4.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_26 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_26 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_1.xzw = u_xlat2.xyz * u_xlat16_4.xxx + u_xlat16_1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = (-u_xlat24) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat24);\n    u_xlat16_5.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_28) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_28);\n    u_xlat16_28 = u_xlat16_29 + _Glossiness;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_28);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xzw + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump float u_xlat16_9;\nmediump float u_xlat16_17;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1.x<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat24) + _WorldSpaceLightPos0.xyz;\n    u_xlat3.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat24 = dot(_WorldSpaceLightPos0.xyz, u_xlat2.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat24 + u_xlat24;\n    u_xlat16_1.x = u_xlat24 * u_xlat16_1.x;\n    u_xlat24 = (-_Glossiness) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat24 + -0.5;\n    u_xlat2.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat2.x = inversesqrt(u_xlat2.x);\n    u_xlat2.xyz = u_xlat2.xxx * vs_TEXCOORD4.xyz;\n    u_xlat3.x = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat16_9 = -abs(u_xlat3.x) + 1.0;\n    u_xlat16_17 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_17 = u_xlat16_17 * u_xlat16_17;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_17;\n    u_xlat16_17 = u_xlat16_1.x * u_xlat16_9 + 1.0;\n    u_xlat3.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_25 = (-u_xlat3.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_4.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_25 + 1.0;\n    u_xlat16_1.x = u_xlat16_17 * u_xlat16_1.x;\n    u_xlat3.x = u_xlat3.x * u_xlat16_1.x;\n    u_xlat16_1.xzw = u_xlat3.xxx * _LightColor0.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat2.xyz = log2(u_xlat16_4.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat2.xyz = exp2(u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat2.xyz = max(u_xlat2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_26 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_1.xzw = u_xlat2.xyz * u_xlat16_4.xxx + u_xlat16_1.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat2.x = u_xlat24 * u_xlat24;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = (-u_xlat24) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(u_xlat24);\n    u_xlat16_5.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_29 = (-u_xlat16_28) + 1.0;\n    u_xlat16_6.xyz = u_xlat0.xyz * vec3(u_xlat16_28);\n    u_xlat16_28 = u_xlat16_29 + _Glossiness;\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat16_7.xyz = (-u_xlat16_5.xyz) + vec3(u_xlat16_28);\n    u_xlat16_5.xyz = vec3(u_xlat16_9) * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_1.xzw + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nlowp float u_xlat10_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat0.x + -0.5;\n    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat3.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;\n    u_xlat8.x = dot(u_xlat3.xyz, (-u_xlat1.xyz));\n    u_xlat16_10 = -abs(u_xlat8.x) + 1.0;\n    u_xlat16_18 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_10 + 1.0;\n    u_xlat8.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_26 = (-u_xlat8.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_4.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26 + 1.0;\n    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat16_2.x;\n    u_xlat16_2.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat8.xyz = log2(u_xlat16_4.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat8.xyz = exp2(u_xlat8.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat10_1 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat10_1 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_2.xzw = u_xlat8.xyz * u_xlat16_4.xxx + u_xlat16_2.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat8.x = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat10_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nin mediump vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_18;\nmediump float u_xlat16_26;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat8.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + _WorldSpaceLightPos0.xyz;\n    u_xlat1.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat8.xyz;\n    u_xlat0.x = dot(_WorldSpaceLightPos0.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_2.x = u_xlat0.x * u_xlat16_2.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat0.x + -0.5;\n    u_xlat8.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat8.x = inversesqrt(u_xlat8.x);\n    u_xlat3.xyz = u_xlat8.xxx * vs_TEXCOORD4.xyz;\n    u_xlat8.x = dot(u_xlat3.xyz, (-u_xlat1.xyz));\n    u_xlat16_10 = -abs(u_xlat8.x) + 1.0;\n    u_xlat16_18 = u_xlat16_10 * u_xlat16_10;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_10 = u_xlat16_10 * u_xlat16_18;\n    u_xlat16_18 = u_xlat16_2.x * u_xlat16_10 + 1.0;\n    u_xlat8.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);\n    u_xlat16_26 = (-u_xlat8.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_4.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_26 + 1.0;\n    u_xlat16_2.x = u_xlat16_18 * u_xlat16_2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat16_2.x;\n    u_xlat16_2.xzw = u_xlat8.xxx * _LightColor0.xyz;\n    u_xlat3.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat3);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat3);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat3);\n    u_xlat16_4.xyz = u_xlat16_4.xyz + vs_TEXCOORD5.xyz;\n    u_xlat16_4.xyz = max(u_xlat16_4.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat8.xyz = log2(u_xlat16_4.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat8.xyz = exp2(u_xlat8.xyz);\n    u_xlat8.xyz = u_xlat8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat8.xyz = max(u_xlat8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_1 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_4.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_4.x = u_xlat16_1 * _OcclusionStrength + u_xlat16_4.x;\n    u_xlat16_2.xzw = u_xlat8.xyz * u_xlat16_4.xxx + u_xlat16_2.xzw;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat8.x = u_xlat0.x * u_xlat0.x;\n    u_xlat8.x = max(u_xlat8.x, 0.00200000009);\n    u_xlat0.x = u_xlat8.x * u_xlat0.x;\n    u_xlat0.x = (-u_xlat0.x) * 0.280000001 + 1.0;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat0.xxx;\n    u_xlat16_28 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x + _Glossiness;\n    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_13.xyz = _Color.xyz * u_xlat16_0.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_28) * u_xlat0.xyz;\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_7.xyz = (-u_xlat16_13.xyz) + u_xlat16_5.xxx;\n    u_xlat16_5.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz + u_xlat16_13.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_5.xyz;\n    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_2.xzw + u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _OcclusionMap;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nlowp float u_xlat10_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nvec3 u_xlat11;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat16_1 = -abs(u_xlat27) + 1.0;\n    u_xlat16_10.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10.x;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat11.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat11.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_10.x = u_xlat27 + u_xlat27;\n    u_xlat16_10.x = u_xlat27 * u_xlat16_10.x;\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat27 + -0.5;\n    u_xlat16_19 = u_xlat16_10.x * u_xlat16_1 + 1.0;\n    u_xlat16_28 = (-u_xlat2.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_28 + 1.0;\n    u_xlat16_10.x = u_xlat16_19 * u_xlat16_10.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = (-u_xlat27) * 0.280000001 + 1.0;\n    u_xlat10_2 = texture2D(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_5.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_5.x = u_xlat10_2 * _OcclusionStrength + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_33 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_32);\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tmediump vec4 unity_IndirectSpecColor;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tmediump float _OcclusionStrength;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _OcclusionMap;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nmediump float u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_10;\nvec3 u_xlat11;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb27 = u_xlat16_1<0.0;\n    if(u_xlatb27){discard;}\n    u_xlat27 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD4.xyz;\n    u_xlat27 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * vs_TEXCOORD1.xyz;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat27) + _WorldSpaceLightPos0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, (-u_xlat3.xyz));\n    u_xlat2.x = dot(u_xlat2.xyz, _WorldSpaceLightPos0.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat16_1 = -abs(u_xlat27) + 1.0;\n    u_xlat16_10.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_10.x;\n    u_xlat27 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat27 = max(u_xlat27, 0.00100000005);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat11.xyz = vec3(u_xlat27) * u_xlat4.xyz;\n    u_xlat27 = dot(_WorldSpaceLightPos0.xyz, u_xlat11.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_10.x = u_xlat27 + u_xlat27;\n    u_xlat16_10.x = u_xlat27 * u_xlat16_10.x;\n    u_xlat27 = (-_Glossiness) + 1.0;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat27 + -0.5;\n    u_xlat16_19 = u_xlat16_10.x * u_xlat16_1 + 1.0;\n    u_xlat16_28 = (-u_xlat2.x) + 1.0;\n    u_xlat16_5.x = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_5.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_28 + 1.0;\n    u_xlat16_10.x = u_xlat16_19 * u_xlat16_10.x;\n    u_xlat2.x = u_xlat2.x * u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat2.x = u_xlat27 * u_xlat27;\n    u_xlat2.x = max(u_xlat2.x, 0.00200000009);\n    u_xlat27 = u_xlat27 * u_xlat2.x;\n    u_xlat27 = (-u_xlat27) * 0.280000001 + 1.0;\n    u_xlat16_2 = texture(_OcclusionMap, vs_TEXCOORD0.xy).y;\n    u_xlat16_5.x = (-_OcclusionStrength) + 1.0;\n    u_xlat16_5.x = u_xlat16_2 * _OcclusionStrength + u_xlat16_5.x;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * unity_IndirectSpecColor.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat27) * u_xlat16_5.xyz;\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_32 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_33 = (-u_xlat16_32) + 1.0;\n    u_xlat16_7.xyz = u_xlat0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_33 + _Glossiness;\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + vec3(u_xlat16_32);\n    u_xlat16_6.xyz = vec3(u_xlat16_1) * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_7.xyz * u_xlat16_10.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD6;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nlowp vec3 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat10_2.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat10_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat10_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture2D(_LightTexture0, vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22 + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD6;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbool u_xlatb1;\nvec4 u_xlat2;\nfloat u_xlat10;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;\n    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;\n    u_xlatb1 = _UVSec==0.0;\n    u_xlat1.xy = (bool(u_xlatb1)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat1.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    vs_TEXCOORD1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat2.xyz = (-u_xlat1.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat1.xyz;\n    u_xlat2.w = 0.0;\n    vs_TEXCOORD2 = u_xlat2.wwwx;\n    vs_TEXCOORD3 = u_xlat2.wwwy;\n    vs_TEXCOORD4.w = u_xlat2.z;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    vs_TEXCOORD4.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * u_xlat0.zzz + u_xlat1.xyz;\n    vs_TEXCOORD6.xyz = hlslcc_mtx4x4unity_WorldToLight[3].xyz * u_xlat0.www + u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nfloat u_xlat7;\nfloat u_xlat8;\nmediump vec3 u_xlat16_11;\nfloat u_xlat14;\nbool u_xlatb14;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nfloat u_xlat22;\nmediump float u_xlat16_25;\nmediump float u_xlat16_26;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat21) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 0.00100000005);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);\n    u_xlat22 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat22 = clamp(u_xlat22, 0.0, 1.0);\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat7 = (-_Glossiness) + 1.0;\n    u_xlat14 = u_xlat7 * u_xlat7;\n    u_xlat14 = max(u_xlat14, 0.00200000009);\n    u_xlat8 = u_xlat14 * u_xlat14;\n    u_xlat15 = u_xlat21 * u_xlat8 + (-u_xlat21);\n    u_xlat21 = u_xlat15 * u_xlat21 + 1.0;\n    u_xlat21 = u_xlat21 * u_xlat21 + 1.00000001e-07;\n    u_xlat8 = u_xlat8 * 0.318309873;\n    u_xlat21 = u_xlat8 / u_xlat21;\n    u_xlat8 = (-u_xlat14) + 1.0;\n    u_xlat15 = abs(u_xlat0.x) * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat1.x * u_xlat8 + u_xlat14;\n    u_xlat14 = u_xlat14 * abs(u_xlat0.x);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat0.x = u_xlat1.x * u_xlat15 + u_xlat14;\n    u_xlat0.x = u_xlat0.x + 9.99999975e-06;\n    u_xlat0.x = 0.5 / u_xlat0.x;\n    u_xlat0.x = u_xlat21 * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * 3.14159274;\n    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);\n    u_xlat0.x = sqrt(u_xlat0.x);\n    u_xlat0.x = u_xlat1.x * u_xlat0.x;\n    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_11.xyz = _Color.xyz * u_xlat16_2.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat2.xyz = u_xlat16_2.xyz * _Color.xyz;\n    u_xlat16_11.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_11.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n    u_xlatb14 = u_xlat16_5.x!=0.0;\n    u_xlat14 = u_xlatb14 ? 1.0 : float(0.0);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat3.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat3.xyz;\n    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat14 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat14 = texture(_LightTexture0, vec2(u_xlat14)).x;\n    u_xlat16_5.xyz = vec3(u_xlat14) * _LightColor0.xyz;\n    u_xlat0.xzw = u_xlat0.xxx * u_xlat16_5.xyz;\n    u_xlat16_26 = (-u_xlat22) + 1.0;\n    u_xlat16_6.x = u_xlat16_26 * u_xlat16_26;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_26 = u_xlat16_26 * u_xlat16_6.x;\n    u_xlat16_6.xyz = (-u_xlat16_11.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_11.xyz = u_xlat16_6.xyz * vec3(u_xlat16_26) + u_xlat16_11.xyz;\n    u_xlat0.xzw = u_xlat0.xzw * u_xlat16_11.xyz;\n    u_xlat16_11.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat22 + u_xlat22;\n    u_xlat16_11.x = u_xlat22 * u_xlat16_11.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat7 + -0.5;\n    u_xlat16_4.x = u_xlat16_11.x * u_xlat16_4.x + 1.0;\n    u_xlat16_18 = (-u_xlat1.x) + 1.0;\n    u_xlat16_25 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_25 = u_xlat16_25 * u_xlat16_25;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_25;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_18 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_11.x;\n    u_xlat7 = u_xlat1.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = vec3(u_xlat7) * u_xlat16_5.xyz;\n    u_xlat16_25 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat2.xyz * vec3(u_xlat16_25);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat0.xzw;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat16 * u_xlat16;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat23 * u_xlat10 + (-u_xlat23);\n    u_xlat23 = u_xlat17 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat23 = u_xlat10 / u_xlat23;\n    u_xlat10 = (-u_xlat3.x) + 1.0;\n    u_xlat17 = abs(u_xlat21) * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2.x * u_xlat17 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_6.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.x = (-u_xlat9) + 1.0;\n    u_xlat16_13.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_13.xyz * u_xlat16_6.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat3.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat0.xyz * u_xlat16_8.xxx;\n    u_xlat16_6.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat9 + u_xlat9;\n    u_xlat16_6.x = u_xlat9 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16 + -0.5;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + 1.0;\n    u_xlat16_13.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_20;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tmediump vec4 _WorldSpaceLightPos0;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nuniform \tvec4 _DetailAlbedoMap_ST;\nuniform \tmediump float _UVSec;\nin highp vec4 in_POSITION0;\nin mediump vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout highp vec4 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec4 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD4;\nout highp vec3 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD7;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlatb0 = _UVSec==0.0;\n    u_xlat0.xy = (bool(u_xlatb0)) ? in_TEXCOORD0.xy : in_TEXCOORD1.xy;\n    vs_TEXCOORD0.zw = u_xlat0.xy * _DetailAlbedoMap_ST.xy + _DetailAlbedoMap_ST.zw;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);\n    vs_TEXCOORD1.w = 0.0;\n    u_xlat1.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;\n    vs_TEXCOORD5.xyz = u_xlat0.xyz;\n    u_xlat1.w = 0.0;\n    vs_TEXCOORD2 = u_xlat1.wwwx;\n    vs_TEXCOORD3 = u_xlat1.wwwy;\n    vs_TEXCOORD4.w = u_xlat1.z;\n    u_xlat0.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat0.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat0.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat6 = inversesqrt(u_xlat6);\n    vs_TEXCOORD4.xyz = vec3(u_xlat6) * u_xlat0.xyz;\n    vs_TEXCOORD7 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nfloat u_xlat10;\nmediump vec3 u_xlat16_13;\nfloat u_xlat16;\nfloat u_xlat17;\nmediump float u_xlat16_20;\nfloat u_xlat21;\nbool u_xlatb21;\nfloat u_xlat23;\nbool u_xlatb23;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb21 = u_xlat16_1<0.0;\n    if(u_xlatb21){discard;}\n    u_xlat21 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * vs_TEXCOORD4.xyz;\n    u_xlat21 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat21) + u_xlat3.xyz;\n    u_xlat5.xyz = vec3(u_xlat21) * vs_TEXCOORD1.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, (-u_xlat5.xyz));\n    u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat23 = max(u_xlat23, 0.00100000005);\n    u_xlat23 = inversesqrt(u_xlat23);\n    u_xlat4.xyz = vec3(u_xlat23) * u_xlat4.xyz;\n    u_xlat23 = dot(u_xlat2.xyz, u_xlat4.xyz);\n    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);\n    u_xlat9 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16 = (-_Glossiness) + 1.0;\n    u_xlat3.x = u_xlat16 * u_xlat16;\n    u_xlat3.x = max(u_xlat3.x, 0.00200000009);\n    u_xlat10 = u_xlat3.x * u_xlat3.x;\n    u_xlat17 = u_xlat23 * u_xlat10 + (-u_xlat23);\n    u_xlat23 = u_xlat17 * u_xlat23 + 1.0;\n    u_xlat23 = u_xlat23 * u_xlat23 + 1.00000001e-07;\n    u_xlat10 = u_xlat10 * 0.318309873;\n    u_xlat23 = u_xlat10 / u_xlat23;\n    u_xlat10 = (-u_xlat3.x) + 1.0;\n    u_xlat17 = abs(u_xlat21) * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = u_xlat2.x * u_xlat10 + u_xlat3.x;\n    u_xlat3.x = abs(u_xlat21) * u_xlat3.x;\n    u_xlat16_1 = -abs(u_xlat21) + 1.0;\n    u_xlat21 = u_xlat2.x * u_xlat17 + u_xlat3.x;\n    u_xlat21 = u_xlat21 + 9.99999975e-06;\n    u_xlat21 = 0.5 / u_xlat21;\n    u_xlat21 = u_xlat23 * u_xlat21;\n    u_xlat21 = u_xlat21 * 3.14159274;\n    u_xlat21 = max(u_xlat21, 9.99999975e-05);\n    u_xlat21 = sqrt(u_xlat21);\n    u_xlat21 = u_xlat2.x * u_xlat21;\n    u_xlat16_8.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_8.xyz, u_xlat16_8.xyz);\n    u_xlatb23 = u_xlat16_6.x!=0.0;\n    u_xlat23 = u_xlatb23 ? 1.0 : float(0.0);\n    u_xlat21 = u_xlat21 * u_xlat23;\n    u_xlat3.xyz = vec3(u_xlat21) * _LightColor0.xyz;\n    u_xlat16_6.x = (-u_xlat9) + 1.0;\n    u_xlat16_13.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x;\n    u_xlat16_13.xyz = (-u_xlat16_8.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_13.xyz * u_xlat16_6.xxx + u_xlat16_8.xyz;\n    u_xlat3.xyz = u_xlat16_8.xyz * u_xlat3.xyz;\n    u_xlat16_8.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_8.xyz = u_xlat0.xyz * u_xlat16_8.xxx;\n    u_xlat16_6.x = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_6.x;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat9 + u_xlat9;\n    u_xlat16_6.x = u_xlat9 * u_xlat16_6.x;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16 + -0.5;\n    u_xlat16_1 = u_xlat16_6.x * u_xlat16_1 + 1.0;\n    u_xlat16_13.x = (-u_xlat2.x) + 1.0;\n    u_xlat16_20 = u_xlat16_13.x * u_xlat16_13.x;\n    u_xlat16_20 = u_xlat16_20 * u_xlat16_20;\n    u_xlat16_13.x = u_xlat16_13.x * u_xlat16_20;\n    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_13.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_6.x;\n    u_xlat0.x = u_xlat2.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat0.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz + u_xlat3.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat10_1.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat10_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat10_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nvec3 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nfloat u_xlat6;\nfloat u_xlat7;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat12;\nfloat u_xlat13;\nmediump float u_xlat16_16;\nfloat u_xlat18;\nfloat u_xlat19;\nbool u_xlatb19;\nmediump float u_xlat16_22;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat18 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat18 = inversesqrt(u_xlat18);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) * vec3(u_xlat18) + u_xlat1.xyz;\n    u_xlat3.xyz = vec3(u_xlat18) * vs_TEXCOORD1.xyz;\n    u_xlat18 = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat19 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat19 = max(u_xlat19, 0.00100000005);\n    u_xlat19 = inversesqrt(u_xlat19);\n    u_xlat2.xyz = vec3(u_xlat19) * u_xlat2.xyz;\n    u_xlat19 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat19 = clamp(u_xlat19, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat12 = (-_Glossiness) + 1.0;\n    u_xlat1.x = u_xlat12 * u_xlat12;\n    u_xlat1.x = max(u_xlat1.x, 0.00200000009);\n    u_xlat7 = u_xlat1.x * u_xlat1.x;\n    u_xlat13 = u_xlat19 * u_xlat7 + (-u_xlat19);\n    u_xlat13 = u_xlat13 * u_xlat19 + 1.0;\n    u_xlat13 = u_xlat13 * u_xlat13 + 1.00000001e-07;\n    u_xlat7 = u_xlat7 * 0.318309873;\n    u_xlat7 = u_xlat7 / u_xlat13;\n    u_xlat13 = (-u_xlat1.x) + 1.0;\n    u_xlat19 = abs(u_xlat18) * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = u_xlat0.x * u_xlat13 + u_xlat1.x;\n    u_xlat1.x = abs(u_xlat18) * u_xlat1.x;\n    u_xlat16_4.x = -abs(u_xlat18) + 1.0;\n    u_xlat18 = u_xlat0.x * u_xlat19 + u_xlat1.x;\n    u_xlat18 = u_xlat18 + 9.99999975e-06;\n    u_xlat18 = 0.5 / u_xlat18;\n    u_xlat18 = u_xlat7 * u_xlat18;\n    u_xlat18 = u_xlat18 * 3.14159274;\n    u_xlat18 = max(u_xlat18, 9.99999975e-05);\n    u_xlat18 = sqrt(u_xlat18);\n    u_xlat18 = u_xlat0.x * u_xlat18;\n    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_10.xyz = _Color.xyz * u_xlat16_1.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_5.x = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);\n    u_xlatb19 = u_xlat16_5.x!=0.0;\n    u_xlat19 = u_xlatb19 ? 1.0 : float(0.0);\n    u_xlat18 = u_xlat18 * u_xlat19;\n    u_xlat2.xyz = vec3(u_xlat18) * _LightColor0.xyz;\n    u_xlat16_5.x = (-u_xlat6) + 1.0;\n    u_xlat16_11.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_11.x = u_xlat16_11.x * u_xlat16_11.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_11.x;\n    u_xlat16_11.xyz = (-u_xlat16_10.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_10.xyz = u_xlat16_11.xyz * u_xlat16_5.xxx + u_xlat16_10.xyz;\n    u_xlat2.xyz = u_xlat2.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_10.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat6 + u_xlat6;\n    u_xlat16_10.x = u_xlat6 * u_xlat16_10.x;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat12 + -0.5;\n    u_xlat16_4.x = u_xlat16_10.x * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = (-u_xlat0.x) + 1.0;\n    u_xlat16_22 = u_xlat16_16 * u_xlat16_16;\n    u_xlat16_22 = u_xlat16_22 * u_xlat16_22;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_22;\n    u_xlat16_10.x = u_xlat16_10.x * u_xlat16_16 + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_22 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_5.xyz = u_xlat1.xyz * vec3(u_xlat16_22);\n    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat2.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat10_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat2.x = texture2D(_LightTexture0, u_xlat2.xx).x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_9;\nfloat u_xlat10;\nvec3 u_xlat11;\nmediump float u_xlat16_15;\nfloat u_xlat18;\nfloat u_xlat19;\nfloat u_xlat24;\nbool u_xlatb24;\nfloat u_xlat26;\nmediump float u_xlat16_30;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1 = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlatb24 = u_xlat16_1<0.0;\n    if(u_xlatb24){discard;}\n    u_xlat24 = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * vs_TEXCOORD1.xyz;\n    u_xlat3.x = vs_TEXCOORD2.w;\n    u_xlat3.y = vs_TEXCOORD3.w;\n    u_xlat3.z = vs_TEXCOORD4.w;\n    u_xlat24 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = u_xlat3.xyz * vec3(u_xlat24) + (-u_xlat2.xyz);\n    u_xlat3.xyz = vec3(u_xlat24) * u_xlat3.xyz;\n    u_xlat24 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat24 = max(u_xlat24, 0.00100000005);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n    u_xlat24 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat5.xyz = vec3(u_xlat24) * vs_TEXCOORD4.xyz;\n    u_xlat24 = dot(u_xlat5.xyz, u_xlat4.xyz);\n    u_xlat24 = clamp(u_xlat24, 0.0, 1.0);\n    u_xlat26 = dot(u_xlat3.xyz, u_xlat4.xyz);\n    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat2.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));\n    u_xlat10 = (-_Glossiness) + 1.0;\n    u_xlat18 = u_xlat10 * u_xlat10;\n    u_xlat18 = max(u_xlat18, 0.00200000009);\n    u_xlat11.x = u_xlat18 * u_xlat18;\n    u_xlat19 = u_xlat24 * u_xlat11.x + (-u_xlat24);\n    u_xlat24 = u_xlat19 * u_xlat24 + 1.0;\n    u_xlat24 = u_xlat24 * u_xlat24 + 1.00000001e-07;\n    u_xlat11.x = u_xlat11.x * 0.318309873;\n    u_xlat24 = u_xlat11.x / u_xlat24;\n    u_xlat11.x = (-u_xlat18) + 1.0;\n    u_xlat19 = abs(u_xlat2.x) * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat3.x * u_xlat11.x + u_xlat18;\n    u_xlat18 = u_xlat18 * abs(u_xlat2.x);\n    u_xlat16_1 = -abs(u_xlat2.x) + 1.0;\n    u_xlat2.x = u_xlat3.x * u_xlat19 + u_xlat18;\n    u_xlat2.x = u_xlat2.x + 9.99999975e-06;\n    u_xlat2.x = 0.5 / u_xlat2.x;\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat24 = u_xlat24 * 3.14159274;\n    u_xlat24 = max(u_xlat24, 9.99999975e-05);\n    u_xlat24 = sqrt(u_xlat24);\n    u_xlat24 = u_xlat3.x * u_xlat24;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * _Color.xyz + vec3(-0.220916301, -0.220916301, -0.220916301);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_9.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_9.xyz + vec3(0.220916301, 0.220916301, 0.220916301);\n    u_xlat16_6.x = dot(u_xlat16_9.xyz, u_xlat16_9.xyz);\n    u_xlatb2 = u_xlat16_6.x!=0.0;\n    u_xlat2.x = u_xlatb2 ? 1.0 : float(0.0);\n    u_xlat24 = u_xlat24 * u_xlat2.x;\n    u_xlat11.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat11.xyz;\n    u_xlat11.xyz = u_xlat11.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n    u_xlat2.x = texture(_LightTexture0, u_xlat2.xx).x;\n    u_xlat16_6.xyz = u_xlat2.xxx * _LightColor0.xyz;\n    u_xlat11.xyz = vec3(u_xlat24) * u_xlat16_6.xyz;\n    u_xlat16_30 = (-u_xlat26) + 1.0;\n    u_xlat16_7.x = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x;\n    u_xlat16_7.xyz = (-u_xlat16_9.xyz) + vec3(1.0, 1.0, 1.0);\n    u_xlat16_9.xyz = u_xlat16_7.xyz * vec3(u_xlat16_30) + u_xlat16_9.xyz;\n    u_xlat11.xyz = u_xlat16_9.xyz * u_xlat11.xyz;\n    u_xlat16_9.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_9.xyz = u_xlat0.xyz * u_xlat16_9.xxx;\n    u_xlat16_30 = u_xlat16_1 * u_xlat16_1;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat16_30 = u_xlat26 + u_xlat26;\n    u_xlat16_30 = u_xlat26 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat10 + -0.5;\n    u_xlat16_1 = u_xlat16_30 * u_xlat16_1 + 1.0;\n    u_xlat16_7.x = (-u_xlat3.x) + 1.0;\n    u_xlat16_15 = u_xlat16_7.x * u_xlat16_7.x;\n    u_xlat16_15 = u_xlat16_15 * u_xlat16_15;\n    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_15;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_7.x + 1.0;\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_30;\n    u_xlat0.x = u_xlat3.x * u_xlat16_1;\n    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz;\n    u_xlat0.xyz = u_xlat16_9.xyz * u_xlat16_6.xyz + u_xlat11.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = u_xlat1.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat15 + u_xlat15;\n    u_xlat16_3.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_13;\n    u_xlat16_8 = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_13 = (-u_xlat5.x) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_3.x = u_xlat16_8 * u_xlat16_3.x;\n    u_xlat0.x = u_xlat5.x * u_xlat16_3.x;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_3.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nbool u_xlatb15;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlatb15 = u_xlat16_1.x<0.0;\n    if(u_xlatb15){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_16 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_16 = u_xlat0.x * u_xlat16_16;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = (-u_xlat15) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_16 * u_xlat16_9 + 1.0;\n    u_xlat16_14 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_9;\n    u_xlat0.x = u_xlat15 * u_xlat16_16;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nbool u_xlatb15;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlatb15 = u_xlat16_1.x<0.0;\n    if(u_xlatb15){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat3.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_16 = u_xlat0.x + u_xlat0.x;\n    u_xlat16_16 = u_xlat0.x * u_xlat16_16;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat2.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat3.xyz));\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = (-u_xlat15) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_16 * u_xlat16_9 + 1.0;\n    u_xlat16_14 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_14;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_4.x + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_9;\n    u_xlat0.x = u_xlat15 * u_xlat16_16;\n    u_xlat16_4.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_8;\nmediump float u_xlat16_13;\nfloat u_xlat15;\nmediump float u_xlat16_18;\nvoid main()\n{\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat1.x = vs_TEXCOORD2.w;\n    u_xlat1.y = vs_TEXCOORD3.w;\n    u_xlat1.z = vs_TEXCOORD4.w;\n    u_xlat5.xyz = (-vs_TEXCOORD1.xyz) * u_xlat0.xxx + u_xlat1.xyz;\n    u_xlat2.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat0.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat0.x = max(u_xlat0.x, 0.00100000005);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat0.x + u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = (-_Glossiness) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat0.x + -0.5;\n    u_xlat0.x = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD4.xyz;\n    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));\n    u_xlat16_8 = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_13 = (-u_xlat15) + 1.0;\n    u_xlat16_18 = u_xlat16_13 * u_xlat16_13;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_13 * u_xlat16_18;\n    u_xlat16_13 = u_xlat16_3.x * u_xlat16_13 + 1.0;\n    u_xlat16_18 = u_xlat16_8 * u_xlat16_8;\n    u_xlat16_18 = u_xlat16_18 * u_xlat16_18;\n    u_xlat16_8 = u_xlat16_8 * u_xlat16_18;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_8 + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_13;\n    u_xlat0.x = u_xlat15 * u_xlat16_3.x;\n    u_xlat16_3.xyz = u_xlat0.xxx * _LightColor0.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat16_18 = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_4.xyz = u_xlat0.xyz * vec3(u_xlat16_18);\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nuniform lowp sampler2D _MainTex;\nuniform highp sampler2D _LightTexture0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD4;\nvarying highp vec3 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec4 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nbool u_xlatb15;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat10_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlatb15 = u_xlat16_1.x<0.0;\n    if(u_xlatb15){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_16 = u_xlat15 + u_xlat15;\n    u_xlat16_16 = u_xlat15 * u_xlat16_16;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_9 + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_16;\n    u_xlat0.x = u_xlat5.x * u_xlat16_16;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture2D(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _LightColor0;\nuniform \tmediump vec4 _Color;\nuniform \tmediump float _Cutoff;\nuniform \tmediump float _Metallic;\nuniform \tfloat _Glossiness;\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToLight[4];\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform highp sampler2D _LightTexture0;\nin highp vec4 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD4;\nin highp vec3 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nvec3 u_xlat3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump float u_xlat16_9;\nmediump float u_xlat16_14;\nfloat u_xlat15;\nbool u_xlatb15;\nmediump float u_xlat16_16;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * _Color.w + (-_Cutoff);\n    u_xlat0.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlatb15 = u_xlat16_1.x<0.0;\n    if(u_xlatb15){discard;}\n    u_xlat16_1.x = (-_Metallic) * 0.779083729 + 0.779083729;\n    u_xlat16_1.xyz = u_xlat0.xyz * u_xlat16_1.xxx;\n    u_xlat0.x = dot(vs_TEXCOORD1.xyz, vs_TEXCOORD1.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD1.xyz;\n    u_xlat2.x = vs_TEXCOORD2.w;\n    u_xlat2.y = vs_TEXCOORD3.w;\n    u_xlat2.z = vs_TEXCOORD4.w;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = u_xlat2.xyz * vec3(u_xlat15) + (-u_xlat0.xyz);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat15 = max(u_xlat15, 0.00100000005);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat3.xyz);\n    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);\n    u_xlat16_16 = u_xlat15 + u_xlat15;\n    u_xlat16_16 = u_xlat15 * u_xlat16_16;\n    u_xlat15 = (-_Glossiness) + 1.0;\n    u_xlat16_16 = u_xlat16_16 * u_xlat15 + -0.5;\n    u_xlat15 = dot(vs_TEXCOORD4.xyz, vs_TEXCOORD4.xyz);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat3.xyz = vec3(u_xlat15) * vs_TEXCOORD4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, (-u_xlat0.xyz));\n    u_xlat5.x = dot(u_xlat3.xyz, u_xlat2.xyz);\n    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n    u_xlat16_4.x = -abs(u_xlat0.x) + 1.0;\n    u_xlat16_9 = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_9;\n    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + 1.0;\n    u_xlat16_9 = (-u_xlat5.x) + 1.0;\n    u_xlat16_14 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_14 = u_xlat16_14 * u_xlat16_14;\n    u_xlat16_9 = u_xlat16_9 * u_xlat16_14;\n    u_xlat16_16 = u_xlat16_16 * u_xlat16_9 + 1.0;\n    u_xlat16_16 = u_xlat16_4.x * u_xlat16_16;\n    u_xlat0.x = u_xlat5.x * u_xlat16_16;\n    u_xlat5.xyz = vs_TEXCOORD5.yyy * hlslcc_mtx4x4unity_WorldToLight[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[0].xyz * vs_TEXCOORD5.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToLight[2].xyz * vs_TEXCOORD5.zzz + u_xlat5.xyz;\n    u_xlat5.xyz = u_xlat5.xyz + hlslcc_mtx4x4unity_WorldToLight[3].xyz;\n    u_xlat5.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat5.x = texture(_LightTexture0, u_xlat5.xx).x;\n    u_xlat16_4.xyz = u_xlat5.xxx * _LightColor0.xyz;\n    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_4.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n"]